#!/bin/bash
#
# Copyright (c) 2017 Regents of The University of Michigan.
# All Rights Reserved.
#
# Author: Robert <heinro@med.umich.edu>
#
set -eEu

# shellcheck disable=SC2034
{
DEFAULT_CHUNK_SIZE=10000
USAGE="[OPTIONS]..."
HELP="mapping script"
ARG_HELP="
  -a, --assembly FILE   Fasta file assembly i.e. contigs or scaffolds
  -c, --chop		Chop up assembly contigs into even size before
                        mapping.  It is suggested to use this if CONCOCT binning
                        is used downstream. The chopped-up assembly is saved in
                        a fasta file that includes 'chop' as part of the name.
      --chunk-size N    Size of chops, the default is $DEFAULT_CHUNK_SIZE, implies
                        --chop
      --index-only      Index the assembly and stop.  Useful when processing
                        a joint assembly from several samples.  In this work-
                        flow run --index-only once and then re-use the index
                        for mapping reads from each sample.
      --cpus N          Number of CPUs to use for parallel processing
      --force           Overwrite any previous results
  -f, --fwd-reads FILE  Fastq file with forward reads
  -r, --rev-reads FILE  Fastq file with reverse reads, in same order
  -i, --int-reads FILE  Fastq file with paired-end, interleaved reads,
                        can also be single-paired reads,
			The default is int.good.fastq
                        Incompatible with bowtie2 <= 2.3.0
  -x PATH, --index-dir PATH
                        Path and base name of bowtie2 index db files
  -o, --out-dir DIR     Name of output directory, default: MAPPING
"
SHORT_OPTIONS=a:cf:i:o:r:x:
LONG_OPTIONS=chop,chunk-size:,cpus:,fwd-reads:,force,rev-reads:,assembly:,index-dir:,index-only,out-dir:,int-reads:
CHECK_PROGS="bowtie2 genomeCoverageBed samtools coveragePerScaffold"
}

##########################
# default variable values
##########################
# chop up assembly into pieces of equal size,
# should be done when using CONCOCT
CHOP_ASSEMBLY=false
CHUNK_SIZE=$DEFAULT_CHUNK_SIZE
#
CPUS=4
#
FORCE=false
# no defaults needed
FWD_READS=fwd.good.fastq
REV_READS=rev.good.fastq
# whether to run indexing
INDEX_ONLY=false
# location for bowtie2 index files, relative to $PWD
INDEX_DIR=bowtie2-index
#
INT_READS=int.good.fastq
# Path to assembly / contigs file relative to $PWD
ASSEMBLY=assembly.fa
# Location for per-sample mapping output, relative to sample directory
OUT_DIR=MAPPING

# option parsing state variables
opts_fwd=false
opts_rev=false
opts_int=false

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	    (-a|--assembly)
	        ASSEMBLY="$2"
	        return 2;;
	    (-c|--chop)
		CHOP_ASSEMBLY=true
		return 1;;
            (--chunk-size)
                CHOP_ASSEMBLY=true
                CHUNK_SIZE=$2
                return 2;;
            (--cpus)
	        CPUS="$2"
	        return 2;;
	    (-f|--fwd-reads)
	        FWD_READS="$2"
		opts_fwd=true
	        return 2;;
	    (--force)
	        FORCE=true
	        return 1;;
	    (-r|--rev-reads)
	        REV_READS="$2"
		opts_rev=true
	        return 2;;
	    (-i|--int-reads)
	        INT_READS="$2"
		opts_int=true
	        return 2;;
	    (-o|--out-dir)
		OUT_DIR="$2"
		return 2;;
	    (--index-only)
		INDEX_ONLY=true
		return 1;;
	    (-x|--index-dir)
		INDEX_DIR="$2"
		return 2;;
        esac
    fi
}

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)


# handle non-option parameters
if [ "$#" -gt 0 ]; then
    abort "Unknown parameters: ${*}"
fi

# more options checking
if $opts_int; then
    ! ($opts_fwd || $opts_rev) || abort "Option --int-reads can not be combined with --fwd-reads or --rev-reads" usage
    use_int_reads=true
else
    use_int_reads=false  # this is also the default if no cmd line options given
    if $opts_fwd; then
	$opts_rev || abort "Use --rev-reads to also specify reverse reads" usage
    elif $opts_rev; then
	abort usage "Use --fwd-reads to also specify reverse reads"
    fi
fi

#########################
# some input sanitation
#########################
[ -d "$WORK_DIR" ] || abort "$WORK_DIR is not accessible."
[ -e "$ASSEMBLY" ] || abort "Assembly file does not exist: $ASSEMBLY"

if ! $INDEX_ONLY; then
    # find read files
    if $use_int_reads; then
        [ -e "$INT_READS" ] || abort "Reads file not found: $INT_READS"
    else
        # this is also the default if no cmd line options were given
        use_int_reads=false
        [ -e "$FWD_READS" ] || abort "Reads file not found: $FWD_READS"
        [ -e "$REV_READS" ] || abort "Reads file not found: $REV_READS"
    fi
fi


#################################
# do stuff
################################
if $use_int_reads; then
    int_reads=$(readlink -f "$INT_READS")
else
    fwd_reads=$(readlink -f "$FWD_READS")
    rev_reads=$(readlink -f "$REV_READS")
fi


# make local link for assembly
#assembly=$(basename "$ASSEMBLY")
assembly=$(realpath "$ASSEMBLY")
#$LN -f -s "$(readlink -f "$ASSEMBLY")" "$OUT_DIR/$assembly"

# get a "name" from name of assembly file without suffix
name=$(basename "$assembly")
name=${name%.*}

if $CHOP_ASSEMBLY; then
    chunk_file=${name}.chop.fa
    if [ -e "$chunk_file" ] && ! $FORCE; then
       abort "File exists: $chunk_file, use --force to override"
    fi
    info "Chopping assembly into chunks..."
    chop-contigs --input "$assembly" --chunk-size "$CHUNK_SIZE" --output "$chunk_file"
    assembly=$(realpath "$chunk_file")
    name=${name}.chop
fi

# generate default index dir if needed
index_dir=$(realpath "$INDEX_DIR")

log=${name}.bowtie2.log
sortBam=${name}.sorted.bam
nameSortBam=${name}.name_sorted.bam
bedOut=${name}.genomeCovBed.tsv
scafCov=${name}.cov
sam_sort_tmp=/tmp

#######################################
#########      PIPELINE       #########
#######################################

if ls "${index_dir}/${name}".[0-9]*.bt2* &> /dev/null; then
    info "Re-using existing index at $index_dir with base name $name"
else
    info "Generating Index..."
    $MKDIR -p -- "$index_dir"
    bowtie2-build --threads "$CPUS" "$assembly" "$index_dir/$name" &>> "$index_dir"/build.log
    info "Index saved under $index_dir/$name*"
fi
$INDEX_ONLY && exit

OUT_DIR=$(readlink -f "$OUT_DIR")
if [ -d "$OUT_DIR" ] && ! $FORCE; then
    abort "Output directory $OUT_DIR exists, use --force to overwrite"
fi

$MKDIR -p "$OUT_DIR"
cd "$OUT_DIR"

info "Aligning reads and processing alignments..."
info "  + Alignment log run written to $log"
printf "\\n[Running bowtie2]\\n" > "$log"
bt2_args=(
    --mm
    --threads "$CPUS"
    -x "$index_dir/$name"
)

if $use_int_reads; then
    info "  + Using $int_reads for reads"
    bt2_args+=(--interleaved "$int_reads")
else
    # this is also the compatibility option for bowtie2 <= 2.3.0
    info "  + Using $fwd_reads AND $rev_reads for reads"
    bt2_args+=(-1 "$fwd_reads" -2 "$rev_reads")
fi

sort_args=(
 -@ "$CPUS"
 -O bam
 -T "$sam_sort_tmp"
)

bowtie2 "${bt2_args[@]}" 2>"$log" \
    | samtools fixmate -O bam - - \
    | tee >(samtools sort "${sort_args[@]}" -n -o "$nameSortBam" -) \
    | samtools sort "${sort_args[@]}" - \
    | tee "$sortBam" \
    | samtools index - "$sortBam.bai" \

info "Calculating Coverage..."
echo -e 'Contig\tDepth\tbases_with_depth\tcontigLen\tfraction_bases_with_depth' > "$bedOut"
genomeCoverageBed -ibam "$sortBam" -g "$assembly" | grep -v "^__" >> "$bedOut"
info "Result at $bedOut"

info "Calculating Coverage Per Scaffold..."
coveragePerScaffold -bed "$bedOut" > "$scafCov"
info "Result at $scafCov"

info "Mapping done, find results in $OUT_DIR"
# gmb: input: scaffold.fa fwd.fastq rev.fastq
# gmb: output:
# gmb: args: --cpus {{ cpus }} --no-color
# gmb: cpus_max: CPUS
