#!/usr/bin/env python3

# Copyright 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.

"""
Fix additional stuff in POD in perl scripts

Note: Makes assumptions about input, little error checking
"""
import argparse
import re
import sys


argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument('inputfile', type=argparse.FileType())
argp.add_argument('-w', '--write-to-file', action='store_true')

args = argp.parse_args()

out = ''

for line in args.inputfile:
    if line.startswith('=item '):
        item_line = line.strip()

        empty_line = args.inputfile.readline()  # empty line following =item
        if empty_line.strip():
            raise RuntimeError('non-empty line following =head')

        descr = args.inputfile.readline()
        m = re.match(
            r'^\[(boolean|characters?|flag|float|integers?|real number)\]'
            r'\s*:?\s*(?P<descr>.*)$',
            descr,
            flags=re.IGNORECASE
        )
        if m is not None:
            # move non-boolean types to =item line
            valtype, descr = m.groups()
            descr += '\n'  # add nl lost by matching
            valtype = valtype.lower().rstrip('s')
            if valtype not in ['flag', 'boolean']:
                opts = item_line[6:]  # remove leading '=item '
                opts = opts.split(', ')
                opts = [i + ' I<{}>'.format(valtype) for i in opts]
                opts = ', '.join(opts)
                item_line = '=item ' + opts

        out += item_line + '\n\n' + descr
    else:
        out += line

# write output
if args.write_to_file:
    args.inputfile.close()
    outfile = open(args.inputfile.name, 'w')
else:
    outfile = sys.stdout

outfile.write(out)
