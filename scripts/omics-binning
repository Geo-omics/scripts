#!/bin/bash
set -eE

# shellcheck disable=SC2034
{
USAGE="[OPTIONS]... SAMPLEDIRS..."
HELP="Implementation of the binning step of the Geomicro Illumina Reads Pipeline"
ARG_HELP="
  -a, --assembly FILE           The fasta file containing the whole assembled contigs
  -u, --chopped-assembly FILE   The fasta file containing the chopped-up contigs.
                                The contigs in this file will be binned if it is given,
                                otherwise the contigs in the file given by -a
  --concoct                     Use the CONCOCT binner.  This is the default
  --metabat                     Use the MetaBAT binner.

 Options for binning with CONCOCT:

  -c, --coverage-file FILE  merged/shared per-sample-contig mean coverage file. If
			    this option is not present, then this file will be
			    compiled from the files found with the
			    --coverage-path argument
      --coverage-path PATH  Path to coverage files relative to each sample directory;
                            the default is MAPPING/<assembly-name>.genomeCovBed.tsv.
			    These files are made by the mapping script and correspond
			    to the asm_pair-smds.bam files made by CONCOCTs
			    map-bowtie2-markduplicates.sh
  -i, --iterations N        Iterations option passed to CONCOCT
      --max-clusters        Maximum number of clusters, sets CONCOCT's -c parameter.

 Options for binning with MetaBAT:

  --bam-path PATH           Path to sorted (but not name-sorted) BAM file
                            relative to each sample directory.  The default is
                            MAPPING/<assembly-name>.sorted.bam

 General options:

  --cpus                    Number of CPUs/threads
  --force                   Overwrite existing output
  -o PATH, --out-dir PATH   Output directory, default is BINNING

"
SHORT_OPTIONS=a:c:i:o:u:
LONG_OPTIONS=assembly:,chopped-assembly:,bam-path:,concoct,cpus:,iterations:,max-clusters:,coverage-file:,coverage-path:,force,metabat,out-dir:
}
handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	(-a|--assembly)
	    REAL_ASSEMBLY="$2"
	    return 2;;
	(-u|-chopped-assembly)
	    CHOPPED_ASSEMBLY="$2"
	    return 2;;
        (--bam-path)
            BAM_PATH="$2"
            return 2;;
        (--concoct)
            USE_CONCOCT=true
            USE_METABAT=false
            return 1;;
	(-c|--coverage-file)
	    COV_FILE="$2"
	    return 2;;
        (-i|--iterations)
            ITERATIONS=$2
            return 2;;
	(--max-clusters)
	    MAX_CLUSTERS="$2"
	    return 2;;
        (--metabat)
            USE_CONCOCT=false
            USE_METABAT=true
            return 1;;
	(--coverage-path)
	    COV_PATH="$2"
	    return 2;;
	(--force)
	    FORCE=true
	    return 1;;
	(-o|--out-dir)
	    OUTDIR="$2"
	    return 2;;
        (--cpus)
            CPUS="$2"
            return 2;;
        esac
    else
        return 0
    fi
}

# Define defaults for cmdline options here
REAL_ASSEMBLY=assembly.fa
CHOPPED_ASSEMBLY=
# default will be derived from assembly name (see below)
BAM_PATH=
#
CPUS=4
# Number of vbgmm iterations for CONCOCT, default is to use CONCOCTs default (500)
ITERATIONS=
# Empty be default, -c won't be set
MAX_CLUSTERS=
FORCE=false
OUTDIR=BINNING
# no default needed
COV_FILE=
# default will be derived from assembly name (see below)
COV_PATH=
# the default binner is CONCOCT
USE_CONCOCT=true
USE_METABAT=false

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)

# handle non-option parameters
if [ "$#" -gt 0 ]; then
    SAMPLE_DIRS=("$@")
else
    abort "Sample data directories must be listed as positional parameters." usage
fi

if $USE_CONCOCT && [[ -n "$MAX_CLUSTERS" ]]; then
    [[ $MAX_CLUSTERS -gt 0 ]] || abort "max-cluster parameter must be number greater than 0"
fi

# your script comes here --->
if [ -n "$CHOPPED_ASSEMBLY" ]; then
    # bin via chopped assembly if given
    using_chopped_asm=true
    assembly=$(readlink -f "$CHOPPED_ASSEMBLY")
else
    using_chopped_asm=false
    assembly=$(readlink -f "$REAL_ASSEMBLY")
fi
outdir=$(readlink -f "$OUTDIR")

name=$(basename "$assembly")
name="${name%.*}"  # the filename without suffix

if [ -n "$COV_PATH" ]; then
    cov_path=$COV_PATH
else
    # assume BAMs were made with pipeline defaults
    cov_path=MAPPING/${name}.genomeCovBed.tsv
fi

if [ -n "$BAM_PATH" ]; then
    bam_path=$BAM_PATH
else
    # assume BAMs were made with pipeline defaults
    bam_path=MAPPING/${name}.sorted.bam
fi

# check if input data exists before doing anything else
for i in "${SAMPLE_DIRS[@]}"; do
    [ -d "$i" ] || abort "is not a directory: $i"
    ! $USE_CONCOCT || [ -r "$i/$cov_path" ] || abort "coverage file not found: $i/$cov_path"
    ! $USE_METABAT || [ -r "$i/$bam_path" ] || abort "sorted bam file not found: $i/$bam_path"
done

[ -r "$assembly" ] || abort "Failed to read assembly file: $assembly"

if [ -d "$outdir" ]; then
    if $FORCE; then
	warning "Output directory $outdir exists, overwriting existing files"
    else
	abort "Output directory $outdir exists, use --force to overwrite"
    fi
fi
$MKDIR -p -- "$outdir"

if [[ $name =~ .chop$ ]]; then
    # name follows omics pipeline conventions, remove .chop again
    bindir=$outdir/${name%.chop}.bins
else
    bindir=$outdir/$name.bins
fi

if $USE_CONCOCT; then
    function log_progress () {
        # gets number of current iterations, requires concoct to be called with --converge_out
        local max_iter=${ITERATIONS:-500}  # assume 500 is concoct's default
        local -a r_csvs
        local plog=$outdir/log.txt
        local last=0
        local cur
        while true; do
            sleep 1m
            mapfile -t r_csvs < <(find "$outdir" -maxdepth 1 -regex "$outdir/r[0-9][0-9]?\.csv")
            [[ ${#r_csvs[@]} == 0 ]] && continue
            [[ -w "$plog" ]] || continue
            # concoct will add one line per iteration to each rNN.csv file,
            # $cur will be the mean fraction of the expected final number of lines
            # across all found rNN.csv files
            cur=$(echo "scale=0; 100 * $(cat "${r_csvs[@]}" | wc -l) / ${#r_csvs[@]} / $max_iter" | bc)
            if [[ $cur != $last ]]; then
                echo "$(date) ${cur}%" >> "$plog"
                last=$cur
            fi
        done
    }

    function plog_clean_up () {
        [[ -n $log_progress_job ]] && kill "$log_progress_job" &>/dev/null || true
    }
    trap plog_clean_up EXIT

    if [ -z "$COV_FILE" ]; then
        info "Collecting coverage data..."
        cov_file=$outdir/${name}.cov
        v_arg=()
        [[ -z "$VERBOSE_FLAG" ]] || v_arg+=("$VERBOSE_FLAG")
        merge-coverage "${v_arg[@]}" -a "$assembly" -o "$cov_file" "${SAMPLE_DIRS[@]/%//$cov_path}"
        info "Mean coverage data written to $cov_file, to be used with --coverage-file option in future invocations of binning"
    else
        cov_file=$(readlink -f "$COV_FILE")
    fi

    [ -f "$cov_file" ] || abort "Failed to read coverage file: $cov_file"

    info "Running CONCOCT..."
    c_args=()
    [[ -z $ITERATIONS ]] || c_args+=(-i "$ITERATIONS")
    [[ -z $CPUS ]] || c_args+=(-t "$CPUS")
    [[ -z $MAX_CLUSTERS ]] || c_args+=(-c "$MAX_CLUSTERS")
    log_progress &
    log_progress_job=$!
    concoct "${c_args[@]}" --converge_out --coverage_file "$cov_file" --composition_file "$assembly" -b "$outdir"
    kill $log_progress_job
    binstable=$outdir/clustering_gt1000.csv
fi

if $USE_METABAT; then
    info "Running MetaBAT..."
    (
        # compile list of name-sorted bams:
        bams=()
        for i in "${SAMPLE_DIRS[@]}"; do
            bams+=("$(realpath "${i}/$bam_path")")
        done
        assembly=$(realpath "$assembly")
        cd "$outdir"
        runMetaBat.sh -t "$CPUS" --noBinOut --saveCls "$assembly" "${bams[@]}"
    )
    binstable=$outdir/$(basename "$assembly").metabat-bins${CPUS}/bin
fi

info "Compiling bins into fasta files at $bindir ..."
b2fargs=(-o "$bindir" "$VERBOSE_FLAG" -s fa "$binstable")
using_chopped_asm && b2fargs+=("$(realpath "$REAL_ASSEMBLY")")
b2fargs+=("$assembly")
bins2fasta "${b2fargs[@]}"

info "Running CheckM..."
checkm lineage_wf \
    -t "$CPUS" --pplacer_threads "$CPUS" \
    -x fa \
    -f "$outdir"/checkm/"$name".bin_stats.csv --tab_table \
    "$bindir" "$outdir/checkm"
