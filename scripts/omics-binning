#!/bin/bash
set -eE

# shellcheck disable=SC2034
{
USAGE="[OPTIONS]... [SAMPLEDIRS]..."
HELP="Implementation of the binning step of the Geomicro Illumina Reads Pipeline"
ARG_HELP="
  -a, --assembly FILE       The fasta file containing the assembled contigs
  --concoct                 Use the CONCOCT binner.  This is the default
  --metabat                 Use the MetaBAT binner.

 Options for binning with CONCOCT:

  -c, --coverage-file FILE  merged/shared per-sample-contig mean coverage file. If
			    this option is not present, then this file will be
			    compiled from the files found with the
			    --coverage-path argument
      --coverage-path PATH  Path to coverage files relative to each sample directory;
                            the default is MAPPING/<assembly-name>.genomeCovBed.tsv.
			    These files are made by the mapping script and correspond
			    to the asm_pair-smds.bam files made by CONCOCTs
			    map-bowtie2-markduplicates.sh
      --max-clusters        Maximum number of clusters, sets CONCOCT's -c parameter.

 Options for binning with MetaBAT:

  --bam-path PATH           Path to sorted (but not name-sorted) BAM file
                            relative to each sample directory.  The default is
                            MAPPING/<assembly-name>_sorted.bam

 General options:

  --cpus                    Number of CPUs/threads
  --force                   Overwrite existing output
  -o PATH, --out-dir PATH   Output directory, default is BINNING

"
CHECK_PROGS="chop-contigs merge-coverage concoct"
SHORT_OPTIONS=a:c:o:
LONG_OPTIONS=assembly:,bam-path:,concoct,cpus:,max-clusters:,coverage-file:,coverage-path:,force,metabat,out-dir:
}
handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	(-a|--assembly)
	    ASSEMBLY="$2"
	    return 2;;
        (--bam-path)
            BAM_PATH="$2"
            return 2;;
        (--concoct)
            USE_CONCOCT=true
            USE_METABAT=false
            return 1;;
	(-c|--coverage-file)
	    COV_FILE="$2"
	    return 2;;
	(--max-clusters)
	    MAX_CLUSTERS="$2"
	    return 2;;
        (--metabat)
            USE_CONCOCT=false
            USE_METABAT=true
            return 1;;
	(--coverage-path)
	    COV_PATH="$2"
	    return 2;;
	(--force)
	    FORCE=true
	    return 1;;
	(-o|--out-dir)
	    OUTDIR="$2"
	    return 2;;
        (--cpus)
            CPUS="$2"
            return 2;;
        esac
    else
        return 0
    fi
}

# Define defaults for cmdline options here
ASSEMBLY=contigs.fa
# default will be derived from assembly name (see below)
BAM_PATH=
#
CPUS=4
# Empty be default, -c won't be set
MAX_CLUSTERS=
FORCE=false
OUTDIR=BINNING
# no default needed
COV_FILE=
# default will be derived from assembly name (see below)
COV_PATH=
# the default binner is CONCOCT
USE_CONCOCT=true
USE_METABAT=false

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)

# handle non-option parameters
if [ "$#" -gt 0 ]; then
    SAMPLE_DIRS=($@)
fi

if $USE_CONCOCT && [[ -n "$MAX_CLUSTERS" ]]; then
    [[ $MAX_CLUSTERS -gt 0 ]] || abort "max-cluster parameter must be number greater than 0"
fi

# your script comes here --->
assembly=$(readlink -f "$ASSEMBLY")
outdir=$(readlink -f "$OUTDIR")

name=$(basename "$assembly")
name="${name%.*}"  # the filename without suffix

if [ -n "$COV_PATH" ]; then
    cov_path=$COV_PATH
else
    # assume BAMs were made with pipeline defaults
    cov_path=MAPPING/${name}.genomeCovBed.tsv
fi

if [ -n "$BAM_PATH" ]; then
    bam_path=$BAM_PATH
else
    # assume BAMs were made with pipeline defaults
    bam_path=MAPPING/${name}_sorted.bam
fi

# check if input data exists before doing anything else
for i in "${SAMPLE_DIRS[@]}"; do
    [ -d "$i" ] || abort "is not a directory: $i"
    ! $USE_CONCOCT || [ -r "$i/$cov_path" ] || abort "coverage file not found: $i/$cov_path"
    ! $USE_METABAT || [ -r "$i/$bam_path" ] || abort "sorted bam file not found: $i/$bam_path"
done

[ -r "$assembly" ] || abort "Failed to read assembly file: $assembly"

if [ -d "$outdir" ]; then
    if $FORCE; then
	warning "Output directory $outdir exists, overwriting existing files"
    else
	abort "Output directory $outdir exists, use --force to overwrite"
    fi
fi
$MKDIR -p -- "$outdir"

if $USE_CONCOCT; then
    if [ -z "$COV_FILE" ]; then
        info "Collecting coverage data..."
        cov_file=$outdir/${name}.cov
        v_arg=()
        [[ -z "$VERBOSE_FLAG" ]] || v_arg+=("$VERBOSE_FLAG")
        merge-coverage "${v_arg[@]}" -a "$assembly" -o "$cov_file" "${SAMPLE_DIRS[@]/%//$cov_path}"
        info "Mean coverage data written to $cov_file, to be used with --coverage-file option in future invocations of binning"
    else
        cov_file=$(readlink -f "$COV_FILE")
    fi

    [ -f "$cov_file" ] || abort "Failed to read coverage file: $cov_file"

    info "Running CONCOCT..."
    c_args=()
    [[ -z $CPUS ]] || c_args+=(-t "$CPUS")
    [[ -z $MAX_CLUSTERS ]] || c_args+=(-c "$MAX_CLUSTERS")
    concoct "${c_args[@]}" --coverage_file "$cov_file" --composition_file "$assembly" -b "$outdir"

    info "Compiling bins into fasta files..."
    bins2fasta -o "${outdir}/bins.chop" -s fa "$outdir/clustering_gt1000.csv" "$assembly"
fi

if $USE_METABAT; then
    info "Running MetaBAT..."
    (
        # compile list of name-sorted bams:
        bams=()
        for i in "${SAMPLE_DIRS[@]}"; do
            bams+=("$(realpath "${i}/$bam_path")")
        done
        assembly=$(realpath "$assembly")
        cd "$outdir"
        runMetaBat.sh -t "$CPUS" "$assembly" "${bams[@]}"
        bindir=$(basename "$assembly").metabat-bins${CPUS}
        if [ -d "$bindir" ]; then
            ln -s "$bindir" bins.chop
        else
            warning "Failed to detect output directory with bins, downstream analysis may fail."
        fi
    )
fi

info "Putting chopped-up contigs back together..."
unchop-contigs -o "$outdir/bins" "$outdir/bins.chop/*.fa"

info "Running CheckM..."
checkm lineage_wf -t "$CPUS" -x fa "$outdir/bins" "$outdir/checkm"
