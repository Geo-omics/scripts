#!/usr/bin/perl
=head1 NAME

CRISPR_spacer_extractor - get positions of repeats and spacers in contigs


=head1 SYNOPSIS

B<CRISPR_spacer_extractor> B<-c> contigs.fasta B<-r> repeats.fasta


=head1 DESCRIPTION

Given a fasta file with repeat sequences and a contig fasta file, get the positions of these repeats in the contigs and find the coordinates of spacers, defined by default as sequences between two repeats which are less than 200 bases apart. This definition can be changed using a B<-len> parameter.

NOTE: This script only searches for exact matches (100% over 100% length) and not "similar" sequences (not even 99.99%)


=head1 OPTIONS

=over 8

=item B<-r>, B<-repeats>

(required)	repeats fasta file

=item B<-c>, B<-contigs>

(required)	contigs fasta file

=item B<-p>, B<-prefix>

output file prefix	(optional; default= process_id)

=item B<-l>, B<-len>

maximum length of a spacer	(optional; default=200)

=item B<-rc>, B<-revcomp>

look for reverse complements of the repeat sequences as well

=back


=head1 AUTHOR

Sunit Jain, April 2013
sunitj@umich.edu


=head1 SEE ALSO

L<omics(1)>, L<illumina-reads-processing(7)>

=head2 Other local resources

=over

=item [1]

L<HTML documentation|file:///usr/share/doc/geo-omics-scripts/html/index.html>

=item [2]

L<Omics workflow documentation [PDF]|file:///usr/share/doc/geo-omics-scripts/Geomicro-Illumina-Reads-Processing-Pipeline.pdf>

=back

=head2 Web

=over

=item [3]

L<Workflow documentation [PDF]|https://drive.google.com/open?id=0BxFSivK8RfJed05wamtrbEVUeE0>

=item [4]

L<Website|http://www.earth.lsa.umich.edu/geomicrobiology/>

=item [5]

L<Github repository|https://github.com/Geo-omics/scripts>

=back

=cut

use strict;
use Getopt::Long;

my ($contigs, $repeats, $RC);
my $prefix=$$;
my $maxSpacerLen=200;

GetOptions(
	'r|repeats=s'=>\$repeats,
	'c|contigs=s'=>\$contigs,
	's|l|len:i'=>\$maxSpacerLen,
	'p|prefix:s'=>\$prefix,
	'rc|revcomp'=>\$RC,
	'h|help'=>sub{system('perldoc', $0); exit;},
);

my ($spacerFile,$repOut);
if ($prefix){
	$spacerFile= $prefix.".spacer.coords";
	$repOut= $prefix.".repeat.coords";
}
else{
	$spacerFile= $$.".spacer.coords";
	$repOut=$$.".repeat.coords";
}

$/=">";
my %REPEATS;
open(REP, $repeats) || die "$!";
while(my $line=<REP>){
	chomp $line;
	$line=~ s/\r//g;
	next unless $line;
	my ($repeat, $seq)=split(/\n/, $line);
	next if (! $repeat);
	$REPEATS{$seq}=$repeat;
	if ($RC){
		my $rcSeq=reverseComplement($seq);
		$REPEATS{$rcSeq}=$repeat."_(*)";
	}
}
$/="\n";
close REP;

$/=">";
my ($numRepeats, $numSpacers);
open(CONTIGS, $contigs)|| die "$!";
open(REPOUT, ">".$repOut)|| die $!;
open(SPACER, ">".$spacerFile)|| die $!;
while(my $line=<CONTIGS>){
	chomp $line;
	$line=~ s/\r//g;
	next unless $line;
	my ($header, @sequence)=split(/\n/, $line);
	my $seq=join("", @sequence);
	my %SPACERS;
	foreach my $r(keys(%REPEATS)){
		my @matches;
		push (@matches, match_all_positions($r,$seq));
		my $matchNum=scalar(@matches);
		if ($matchNum > 0){
			$numRepeats++;
			print REPOUT ">".$header."\t".$REPEATS{$r}."\t".$matchNum."\n";
			foreach my $m(@matches){
				my $pos=join("\t",@$m);
				$SPACERS{$pos}=$$m[0];
				print REPOUT $pos."\n";
			}
		}
	}
	my $prevStop=0;
	foreach my $pos(sort{$SPACERS{$a} <=> $SPACERS{$b}} keys %SPACERS ){
		my($start, $stop)=split(/\t/, $pos);
		if(($start-$prevStop) <= $maxSpacerLen){
			$numSpacers++;
			print SPACER $header."\t".$prevStop."\t".$start."\n"
		}
		$prevStop=$stop;
	}	
}
$/="\n";
close CONTIGS;
close REPOUT;
close SPACER;
print "Repeats Found:\t$numRepeats\n";
print "Spacers Found:\t$numSpacers\n";

system("extractSubSeq -f $contigs -t $spacerFile -o $prefix.spacers.fasta -start 2 -stop 3") == 0
    or die "Error running the extractSubSeqs script.\nIf you need the fasta file for your spacer sequences, please run the script on your contigs and spacer.coords file\n";

exit 0;
###########################################################################################

sub match_positions {
    my ($regex, $string) = @_;
    return if not $string =~ /$regex/;
    return ($-[0], $+[0]);
}
sub match_all_positions {
    my ($regex, $string) = @_;
    my @ret;
    while ($string =~ /$regex/g) {
        push @ret, [ $-[0], $+[0] ];
    }
    return @ret
}
sub reverseComplement{
	my $seq=scalar(@_) ? shift : <IN>;
	chomp $seq;
	my $rSeq=uc(reverse($seq));
	$rSeq=~ tr/GTCA/CAGT/;
	return $rSeq;
}
