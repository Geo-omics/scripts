#!/bin/bash
#
# Copyright (c) 2017 Regents of The University of Michigan.
# All Rights Reserved.
#
# Author: Robert <heinro@med.umich.edu>
#
set -eE

# shellcheck disable=SC2034
{
USAGE="[OPTIONS]..."
HELP="mapping script"
ARG_HELP="
  -a, --assembly FILE   Fasta file assembly i.e. contigs or scaffolds
  -c, --chop		Chop up assembly contigs into even size before
                        mapping
      --cpus N          Number of CPUs to use for parallel processing
  -f, --fwd-reads FILE  Fastq file with forward reads
  -r, --rev-reads FILE  Fastq file with reverse reads, in same order
  -i, --int-reads FILE  Fastq file with paired-end, interleaved reads,
                        can also be single-paired reads,
			The default is dt_int.fastq
  -o, --out-dir DIR     Name of output directory, default: MAPPING
      --no-indexing     Do not index the assembly but existing index
"
SHORT_OPTIONS=a:cf:i:o:r:
LONG_OPTIONS=chop,cpus:,fwd-reads:,rev-reads:,assembly:,no-indexing,out-dir:,int-reads:
CHECK_PROGS="bwa genomeCoverageBed samtools coveragePerScaffold"
}

##########################
# default variable values
##########################
# chop up assembly into pieces of equal size,
# should be done when using CONCOCT
CHOP_ASSEMBLY=false
#
CPUS=4
# Maximum memory per thread used for some samtools commands with -m option
# On a flux high-mem node we could use 25G but on cayman/vondamm we calculate
# 512GB / 32 CPUs
MEM_PER_THREAD=16G
# no defaults needed
FWD_READS=
REV_READS=
# whether to run indexing
INDEX=true
#
INT_READS=dt_int.fastq
#
ASSEMBLY=assembly.fa
#
OUT_DIR=MAPPING

# option parsing state variables
opts_fwd=false
opts_rev=false
opts_int=false

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	    (-a|--assembly)
	        ASSEMBLY="$2"
	        return 2;;
	    (-c|--chop)
		CHOP_ASSEMBLY=true
		return 1;;
	    (--cpus)
	        CPUS="$2"
	        return 2;;
	    (-f|--fwd-reads)
	        FWD_READS="$2"
		opts_fwd=true
	        return 2;;
	    (-r|--rev-reads)
	        REV_READS="$2"
		opts_rev=true
	        return 2;;
	    (-i|--int-reads)
	        INT_READS="$2"
		opts_int=true
	        return 2;;
	    (-o|--out-dir)
		OUT_DIR="$2"
		return 2;;
	    (--no-indexing)
		INDEX=false
		return 1;;
        esac
    fi
}

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)


# handle non-option parameters
if [ "$#" -gt 0 ]; then
    abort "Unknown parameters: ${*}"
fi

# more options checking
if $opts_int; then
    ! ($opts_fwd || $opts_rev) || abort "Option --int-reads can not be combined with --fwd-reads or --rev-reads" usage
    use_int_reads=true
else
    if $opts_fwd; then
	$opts_rev || abort "Use --rev-reads to also specify reverse reads" usage
	use_int_reads=false
    elif $opts_rev; then
	abort usage "Use --fwd-reads to also specify reverse reads"
    else
	use_int_reads=true
    fi
fi

#########################
# some input sanitation
#########################
[ -d "$WORK_DIR" ] || abort "$WORK_DIR is not accessible."
[ -e "$ASSEMBLY" ] || abort "Assembly file does not exist: $ASSEMBLY"

# find read files
if $use_int_reads; then
    [ -e "$INT_READS" ] || abort "Reads file not found: $INT_READS"
else
    [ -e "$FWD_READS" ] || abort "Reads file not found: $FWD_READS"
    [ -e "$REV_READS" ] || abort "Reads file not found: $REV_READS"
fi


#################################
# do stuff
################################
OUT_DIR=$(readlink -f "$OUT_DIR")
if [ -d "$OUT_DIR" ]; then
    if $FORCE; then
	$RM -rf -- "$OUT_DIR"
    else
	abort "Output directory $OUT_DIR exists, use --force to overwrite"
    fi
fi

if $use_int_reads; then
    int_reads=$(readlink -f "$INT_READS")
else
    fwd_reads=$(readlink -f "$FWD_READS")
    rev_reads=$(readlink -f "$REV_READS")
fi

$MKDIR -p "$OUT_DIR"

# make local link for assembly
assembly=$(basename "$ASSEMBLY")
$LN -s "$(readlink -f "$ASSEMBLY")" "$OUT_DIR/$assembly"

cd "$OUT_DIR"
info "Output / working directory is $OUT_DIR"

# get a "name" from name of assembly file without suffix
name=$(basename "$assembly")
name=${name%.*}

if $CHOP_ASSEMBLY; then
    info "Chopping assembly into chunks..."
    chunk_file=${name}.chop.fa
    chop-contigs --input "$assembly" --output "$chunk_file"
    assembly=$chunk_file
    name=${name}.chop
fi

alnSam=${name}_aligned.sam
alnSamLog=${name}.aln.log
sam2bam=${name}_fixmate.bam
sortBam=${name}_sorted.bam
nameSortBam=${name}_name_sorted.bam
readGroup="@RG\\tID:group_${1}\\tSM:Sample_${1}\\tPL:illumina\\tLB:lib_${1}\\tPU:unit_${1}"
bedOut=${name}.genomeCovBed.tsv
scafCov=${name}.cov

#######################################
#########      PIPELINE       #########
#######################################
if $INDEX; then
    info "Indexing Database..."
    bwa index "$assembly"
fi

info "Aligning reads using 'bwa mem'..."
info "[NOTE] Using Read Group ${readGroup}"
info "[NOTE] bwa mem run is logged to $alnSamLog"
if $use_int_reads; then
	info "[NOTE] Using $int_reads for reads"
	bwa mem -M -R "$readGroup" -t "$CPUS" -p "$assembly" "$int_reads" 1> "$alnSam" 2> "$alnSamLog";
else
	info "[NOTE] Using $fwd_reads AND $rev_reads for reads"
	echo bwa mem -M -R "$readGroup" -t "$CPUS" "$ASSEMBLY" "$fwd_reads" "$rev_reads" REDIR "$alnSam" REDIR "$alnSamLog";
	bwa mem -M -R "$readGroup" -t "$CPUS" "$ASSEMBLY" "$fwd_reads" "$rev_reads" 1> "$alnSam" 2> "$alnSamLog";
fi

info "Fixing alignment artifacts and converting SAM to BAM..."
samtools fixmate -O bam "$alnSam" "$sam2bam"

info "Sorting BAM by Name..."
samtools sort -n -m $MEM_PER_THREAD -@ "$CPUS" -O bam -o "$nameSortBam" -T samSort.tmp "$sam2bam"

info "Sorting BAM by Position..."
samtools sort -m $MEM_PER_THREAD -@ "$CPUS" -O bam -o "$sortBam" -T samSort.tmp "$sam2bam"

info "Indexing Sorted BAM..."
samtools index "$sortBam"

info "Calculating Coverage..."
echo -e "Contig\tDepth\tbases_with_depth\tcontigLen\tfraction_bases_with_depth" > "$bedOut"
genomeCoverageBed -ibam "$sortBam" -g "$assembly" | grep -v "^__" >> "$bedOut"

info "Calculating Coverage Per Scaffold..."
coveragePerScaffold -bed "$bedOut" > "$scafCov"

info "Mapping done, find results in $OUT_DIR"
# gmb: input: scaffold.fa fwd.fastq rev.fastq
# gmb: output:
# gmb: args: --cpus {{ cpus }} --no-color
# gmb: cpus_max: CPUS
