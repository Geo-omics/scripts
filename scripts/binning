#!/bin/bash
set -eE

# shellcheck disable=SC2034
{
USAGE="[OPTIONS]... [SAMPLEDIRS]..."
HELP="Implementation of the binning step of the Geomicro Illumina Reads Pipeline"
ARG_HELP="
  -a, --assembly FILE       The fasta file containing the assembled contigs
  -c, --coverage-file FILE  merged/shared per-sample-contig mean coverage file. If
			    this option is not present, then this file will be
			    compiled from the files found with the
			    --coverage-path argument
      --coverage-path PATH  Path to coverage files relative to each sample directory;
                            the default is MAPPING/assembly.chop.genomeCovBed.tsv.
			    These files are made by the mapping script and correspond
			    to the asm_pair-smds.bam files made by CONCOCTs
			    map-bowtie2-markduplicates.sh
      --max-clusters        Maximum number of clusters, sets CONCOCT's -c parameter.
      --force               Overwrite existing output

"
CHECK_PROGS="chop-contigs merge-coverage concoct"
SHORT_OPTIONS=a:c:o:
LONG_OPTIONS=assembly:,max-clusters:,coverage-file:,coverage-path:,force,out-dir:
}
handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	(-a|--assembly)
	    ASSEMBLY="$2"
	    return 2;;
	(-c|--coverage-file)
	    COV_FILE="$2"
	    return 2;;
	(--max-clusters)
	    MAX_CLUSTERS="$2"
	    return 2;;
	(--coverage-path)
	    COV_PATH="$2"
	    return 2;;
	(--force)
	    FORCE=true
	    return 1;;
	(-o|--out-dir)
	    OUTDIR="$2"
	    return 2;;
        esac
    else
        return 0
    fi
}

# Define defaults for cmdline options here
ASSEMBLY=contigs.fa
# Empty be default, -c won't be set
MAX_CLUSTERS=
FORCE=false
OUTDIR=BINNING
# no default needed
COV_FILE=
# default as made by mapping script
COV_PATH=MAPPING/assembly.chop.genomeCovBed.tsv

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)

# handle non-option parameters
if [ "$#" -gt 0 ]; then
    SAMPLE_DIRS=($@)
fi

# check if input data exists before doing anything
for i in "${SAMPLE_DIRS[@]}"; do
    [ -d "$i" ] || abort "is not a directory: $i"
    [ -r "$i/$COV_PATH" ] || abort "coverage file not found: $i/$COV_PATH"
done

if [[ -n "$MAX_CLUSTERS" ]]; then
    [[ $MAX_CLUSTERS -gt 0 ]] || abort "max-cluster parameter must be number greater than 0"
fi

# your script comes here --->
assembly=$(readlink -f "$ASSEMBLY")
outdir=$(readlink -f "$OUTDIR")

name=$(basename "$assembly")
name="${name%.*}"  # the filename without suffix

[ -r "$assembly" ] || abort "Failed to read assembly file: $assembly"

if [ -d "$outdir" ]; then
    if $FORCE; then
	warning "Output directory $outdir exists, overwriting existing files"
    else
	abort "Output directory $outdir exists, use --force to overwrite"
    fi
fi
$MKDIR -p -- "$outdir"

if [ -z "$COV_FILE" ]; then
    info "Collecting coverage data..."
    cov_file=$outdir/${name}.cov
    # shellcheck disable=SC2068
    merge-coverage "$VERBOSE_FLAG" -a "$assembly" -o "$cov_file" ${SAMPLE_DIRS[@]/%//$COV_PATH}
    info "Mean coverage data written to $cov_file, to be used with --coverage-file option in future invocations of binning"
else
    cov_file=$(readlink -f "$COV_FILE")
fi

[ -f "$cov_file" ] || abort "Failed to read coverage file: $cov_file"

info "Running CONCOCT..."
if [[ -n "$MAX_CLUSTERS" ]]; then
    c_arg="-c $MAX_CLUSTERS"
else
    c_arg=
fi
concoct $c_arg --coverage_file "$cov_file" --composition_file "$assembly" -b "$outdir"

