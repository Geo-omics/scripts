#!/usr/bin/env python3

# Copyright 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.

"""
Separate interleaved-reads fasta/q file into forwards and reverse files.

Input file must be in FASTQ or FASTA format, Sequence and quality score must be
on a single line each, separated by a '+', read headers must start with '@' or
'>'.  The script will auto-detect the file format based on the first header.

It is not checked if two reads are actually paired-end reads, however an error
will be raised if the input file containes an uneven number of sequences.
"""
import argparse
from pathlib import Path
import sys

FASTQ = 'fastq'
FASTA = 'fasta'

argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument(
    'inputfile',
    type=argparse.FileType('rb'),
    nargs='?',
    default=sys.stdin.buffer,
    help='Interleaved-reads FASTA or FASTQ file.',
)
argp.add_argument(
    '-f', '--fwd', '--forward-out',
    metavar='FILE',
    help='Name of forward output file.  A value is derived from the input'
         'filename by default.',
)
argp.add_argument(
    '-r', '--rev', '--reverse-out',
    metavar='FILE',
    help='Name of reverse output file.  A value is derived from the input'
         'filename by default.',
)
argp.add_argument(
    '-v', '--verbose',
    action='count',
    default=1,
    dest='verbosity',
    help='Show increased diagnostic output.',
)

args = argp.parse_args()

# detect file format
try:
    fmt_indicator = args.inputfile.peek(1)[0]
except IndexError:
    argp.error('Input file is empty')
else:
    if fmt_indicator == ord('@'):
        file_fmt = FASTQ
    elif fmt_indicator == ord('>'):
        file_fmt = FASTA
    else:
        argp.error('Bad file format: first character in {} is "{}", expect "@"'
                   ' or ">"'.format(args.inputfile.name, chr(fmt_indicator)))

if args.verbosity >= 2:
    print('Detected {} file format'.format(file_fmt))

prefix = Path(args.inputfile.name).stem
fwd_name = args.fwd or '{}.fwd.{}'.format(prefix, file_fmt)
rev_name = args.rev or '{}.rev.{}'.format(prefix, file_fmt)

if fwd_name == rev_name:
    argp.error('Please choose distinct names for output files')

fwd = open(fwd_name, 'wb')
rev = open(rev_name, 'wb')

# state space
F = 0  # forward
R = 1  # reverse

H = 0  # head
S = 1  # sequence
if file_fmt is FASTA:
    lines_per_seq = 2
elif file_fmt is FASTQ:
    P = 2  # plus separator
    Q = 3  # quality
    lines_per_seq = 4


file = {F: fwd, R: rev}


state = F, H
linenum = 0
bytes_written = {F: 0, R: 0}
for line in args.inputfile:
    linenum += 1

    if state[0] not in [0, 1] or state[1] not in range(lines_per_seq):
        raise RuntimeError('Illegal internal state: {}, line: {}'
                           ''.format(state, linenum))

    if state[1] == H and line[0] != fmt_indicator:
        raise RuntimeError('Line {} is not a {} header: {}'
                           ''.format(linenum, file_fmt, line.decode()))

    if file_fmt is FASTQ and state[1] == P and line != b'+\n':
        raise RuntimeError('Line {} is not the + separator as expected:'
                           ''.format(linenum, line.decode()))

    bytes_written[state[0]] += file[state[0]].write(line)

    if file_fmt is FASTQ and state[1] == Q:
        # go back to header and switch file
        state = state[0] ^ 1, H
    elif file_fmt is FASTA and state[1] == S:
        # go back to header and switch file
        state = state[0] ^ 1, H
    else:
        state = state[0], (state[1] + 1) % lines_per_seq

args.inputfile.close()

if linenum % (2 * lines_per_seq) != 0:
    raise RuntimeError(
        'Data missing or file corrupt: Found {} lines in {}; expected a '
        'multiple of {}'.format(linenum, args.inputfile.name,
                                2 * lines_per_seq)
    )

if args.verbosity >= 2:
    for i, f in file.items():
        print('{} reads / {} bytes written to {}'
              ''.format(
                  int(linenum / (2 * lines_per_seq)),
                  bytes_written[i],
                  f.name)
              )
