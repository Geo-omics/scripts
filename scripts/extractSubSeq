#!/usr/bin/perl

# Copyright 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.


=head1 NAME

extractSubSeq - extract matching subsequences

=head1 SYNOPSIS

B<extractSubSeq> B<-f> I<fasta_file> B<-tsv> I<custom_tab-delimited_file>

B<extractSubSeq> B<-f> I<fasta_file> B<-blast> I<blast_file> B<-query>

B<extractSubSeq> B<-f> I<fasta_file> B<-gff> I<gff3_file>


=head1 OPTIONS

=head2 For Blast Output

=over

=item B<-query> Do you want sub sequences of your queries?

=item B<-subj>	Do you want sub sequences of your matches/subjects?

=back

=head2 For GFF3

=over

=item B<-map>

If you wish to replace the names of the contigs, give it a "map" file;
    column1=name you wish to change to
    column2=name of the contig in the GFF file

=item B<-header>

only use the tag from attributes column as sequence header (example: "locus_tag" or "id"); default: scaffoldName__locus_tag=####__[start-end]

=item B<-feat>, B<-feature_type> I<type>

only extract genes of a certain type (example: "cds" or "exon"); default: all.

=back

=head2 General Options

=over

=item B<-start> I<n>

start coordinate column Number; default: 7 for blast query; 9 for blast subject; 2 for custom tabbed file; 4 for GFF3

=item B<-stop> I<n>

stop coordinate column Number; default: 8 for blast query; 10 for blast subject; 3 for custom tabbed file; 5 for GFF3

=item B<-o> I<output fileName>  default processID.fasta

=item B<-n> I<n>    Column number>; default: 1

=item B<-l> I<n>    set minimum alignment length>; default: 0

=item B<-p> I<n>    set minimum % identity>; default: 0

=item B<-s> I<n>    set minimum bit score>; default: 0

=item B<-top>   flag to only get the top hit for each query.

=back

=head1 AUTHOR

Sunit Jain, sunitj-at-umich-dot-edu
April 2010


=head1 SEE ALSO

L<omics(1)>, L<illumina-reads-processing(7)>

=head2 Other local resources

=over

=item [1]

L<HTML documentation|file:///usr/share/doc/geo-omics-scripts/html/index.html>

=item [2]

L<Omics workflow documentation [PDF]|file:///usr/share/doc/geo-omics-scripts/Geomicro-Illumina-Reads-Processing-Pipeline.pdf>

=back

=head2 Web

=over

=item [3]

L<Workflow documentation [PDF]|https://drive.google.com/open?id=0BxFSivK8RfJed05wamtrbEVUeE0>

=item [4]

L<Website|http://www.earth.lsa.umich.edu/geomicrobiology/>

=item [5]

L<Github repository|https://github.com/Geo-omics/scripts>

=back

=cut

use strict;
use Getopt::Long;

my ($fasta, $needsSubj, $needsQuery);
my ($isTabbedFile,$isBlastOut,$isGff, $map);
my ($start, $stop,$topHitOnly,$featType,$headerType);
my $setLen=0;
my $setBS=0;
my $setPid=0;
my $out = $$."_subSeqs.fasta";
my $version="extractSubSeqs\tv0.3.1";

GetOptions(
	'f|fasta:s'=>\$fasta,
	't|tsv|list:s'=>\$isTabbedFile,
	'blast:s'=>\$isBlastOut,
	'gff:s'=>\$isGff,
	'map:s'=>\$map,
	'start:i'=>\$start,
	'stop:i'=>\$stop,
	'query'=>\$needsQuery,
	'subj'=>\$needsSubj,
	'l|len:i'=>\$setLen,
	'p|pid:i'=>\$setPid,
	's|bitscore:i'=>\$setBS,
	'top'=>\$topHitOnly,
	'o|out:s'=>\$out,
	'feat|feature_type:s'=>\$featType,
	'header:s'=>\$headerType,
	'h|help'=> sub{print $version."\n"; system("perldoc $0 \| cat"); exit;},
	'v|version'=> sub{print "# $version\n"; exit;},
);

print "# $version\n";

my $tsv;
if(! $isTabbedFile && ! $isBlastOut && ! $isGff){system('perldoc', $0); exit;}
if($headerType) {$headerType=lc($headerType)}
if($featType) {$featType=lc($featType)}
if ($isTabbedFile){ 
	$tsv = $isTabbedFile;
	if (!$start && !$stop){
		warn "[WARNING] Need start and stop columns\nAssuming Start as col 2 and Stop as col 3:\n";
		$start=2;
		$stop=3;
	}
}
elsif ($isBlastOut){
	$tsv = $isBlastOut;
	if ($needsQuery){
		$start=7;
		$stop=8;
	}
	elsif($needsSubj){
		$start=9;
		$stop=10;
	}
	else{
		die "[ERROR] You need to specify, which column (-query or -subj)I need to look at\nSee '-h' for help on how to use this script\n";
	}
}
elsif ($isGff){
	$tsv = $isGff;
	$start=4;
	$stop=5;
}

$start--;
$stop--;

my %coord;
open( TSV, $tsv) || die "[error] $tsv: $! \n";
while (my $line=<TSV>){
	next if $line=~ /^#/;
	chomp $line;
	$line=~ s/\r//g;
	next unless $line;
	
	my $xy;
	my @cols= split(/\t/, $line);
	if ($isBlastOut){ 
		my ($alnLen, $pid, $bs, $q, $s)=&parseBlastOut($line); 
		next if ($alnLen < $setLen);
		next if ($pid < $setPid);
		next if ($bs < $setBS);

		if ($needsQuery){
			next if ($topHitOnly && $coord{$q});
			$xy=$s."\t".$cols[$start]."\t".$cols[$stop];
			push(@{$coord{$q}},$xy);
		}
		elsif($needsSubj){
			next if ($topHitOnly && $coord{$s});
			$xy=$q."\t".$cols[$start]."\t".$cols[$stop];
			push(@{$coord{$s}},$xy);
		}
	}
	elsif($isGff){
		my $name= &parseGFF3($line);
		next unless $name;
		my $contig=$cols[0];
		$xy=$name."\t".$cols[$start]."\t".$cols[$stop];
		push(@{$coord{$contig}},$xy);
	}
	elsif($isTabbedFile){
		my $name=$cols[0];
		$xy=$cols[$start]."\t".$cols[$stop];
		push(@{$coord{$name}},$xy);
	}
}

my %mapping;
if($map){
	open(MAP, $map)|| die $!;
	while (my $line=<MAP>){
		next if $line=~ /^#/;
		chomp $line;
		$line=~ s/\r//;
		next unless $line;
	
		my($origName, $givenName)=split(/\t/, $line);
		$mapping{$givenName}=$origName
	}
	close MAP;
}


open (FASTA, $fasta)|| die "[error] $fasta: $!\n";
open (OUT, ">".$out);
$/=">";
while (my $line=<FASTA>){
	next if $line=~ m/^#/;
	chomp $line;
	$line=~ s/\r//g;
	next unless $line;

	my ($name, @seq)=split(/\n/, $line);
	my $sequence=join("", @seq);
	my $seqLen=length($sequence);
	my @wholeSeq=split(//, $sequence);
	if (($name=~ /\s/g) && ($isBlastOut)){ 
		my $etc;
		($name, $etc)=split(/\s/, $name);
	}
	if ($coord{$name}){
		foreach my $pos(@{$coord{$name}}){
			my (@posStuff)=split(/\t/, $pos);
			my ($match, $posStart, $posStop, $printLine);
			if($isBlastOut){
				$match=$posStuff[0];
				$posStart=$posStuff[1];
				$posStop=$posStuff[2];
				$printLine.=">".$name."_vs_".$match;
			}
			elsif($isGff){
				if ($mapping{$name}){ $match=$mapping{$name}}else{$match=$name};
				my $attribute=$posStuff[0];
				$posStart=$posStuff[1];
				$posStop=$posStuff[2];
				if($headerType){
					$printLine.=">".$attribute
				}
				else{
					$printLine.=">".$match."__locus_tag=".$attribute;
				}
			}
			elsif($isTabbedFile){
				$posStart=$posStuff[0];
				$posStop=$posStuff[1];
				$printLine.=">".$name;
			}
			$printLine.="__[".$posStart."-".$posStop."]" unless ($headerType);
			$printLine.="\n";
			my ($begin, $end)=sort{$a <=> $b}($posStart, $posStop);
			if($end > $seqLen){
				print STDERR "The 'stop coordinate' [".$end."] is out of bounds. Length of the sequence [".$seqLen."]\n";
				die "[FATAL] $printLine\n"
			}
			$begin--;
			$end--;
			print OUT $printLine;
			print OUT @wholeSeq[$begin..$end];
			print OUT "\n";
		}
	}
}
close FASTA;
close OUT;

sub parseGFF3{
#http://gmod.org/wiki/GFF
	my $line=shift;
	my @cols=split(/\t/, $line);

	my(@attributes)=split(/\;/, $cols[-1]);
	
	if ($featType){
		return unless (lc($cols[2]) eq lc($featType));
	}

	my ($locusID,%attribs);
	foreach my $att(@attributes){
		my @a=split(/\=/, $att);
		my $value=join("=",@a[1..$#a]);
		$attribs{lc($a[0])}=$value;
	}

	if(($headerType) && ($attribs{lc($headerType)})){
		$locusID = $attribs{lc($headerType)};
	}
	elsif(! $headerType){
		if( $attribs{"locus_tag"}){
			$locusID=$attribs{"locus_tag"}
		}
		else{
			if ($attribs{"parent"}){
				$locusID=$attribs{"parent"}."_exon"
			}
			elsif($attribs{"repeat"}){
				$locusID=$attribs{"repeat"} if ($attribs{"rpt_type"}); # rpt_type=CRISPR;rpt_unit=13023..13055
				$locusID.="[ ".$attribs{"rpt_unit"}." ]" if ($attribs{"rpt_unit"});
			}
			else{
				$locusID=$attribs{"id"}."_".$cols[2];
			}
		}
	}
	
	return $locusID;
}

sub parseBlastOut{
#	0		1		2	3		4		5		6		7		8		9		10		11
#	query	sbjct	%id	a_len	m_cnt	g_cnt	q_start	q_end	s_start	s_end	e_val	b_score
	my $line=shift;
	my(@cols)=split(/\t/, $line);
	my $aLen=$cols[3];
	my $mis=$cols[4];
	my $gaps=$cols[5];
	my $alnLen= $aLen - ($mis + $gaps);
	my $pid= int($cols[2] + 0.5);
	my $bs=int($cols[11] + 0.5);
	
	return ($alnLen, $pid, $bs, $cols[0], $cols[1]);
}

