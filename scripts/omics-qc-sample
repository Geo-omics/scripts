#!/bin/bash

# Copyright 2014, 2015, 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.
# Copyright (c) 2017 Regents of The University of Michigan.
# All Rights Reserved.

set -ueEo pipefail
RESOURCE_DIR=$(dirname "$0")/../share/geo-omics-scripts

# shellcheck disable=SC2034
{
USAGE="[OPTIONS]..."
HELP="quality control for a sample's fastq files"
ARG_HELP="
  -f, --fwd             Fastq file name with forward reads, default is fwd.fastq.
                        A file with this name needs to be present in each sample
                        directory.
  -r, --rev             Fastq file name with reverse reads default is rev.fastq.
                        A file with this name needs to be present in each sample
                        directory.
      --final INFIX     Infix used for final output files.  Default is 'good'
      --clean-only      Delete previously created files and stop.
  -a, --adapters=FILE   Specifies the adapters file to be used.  By default a
                        file based on the Illumina adapter file TruSeq3-PE-2.fa
                        as distributed by the Trimmomatic project.
      --keep-all	Keep all intermediate files, by default some not-so-important
			intermediate results will be deleted to save disk space
      --no-dereplicate  Skip the de-replication step
  -F, --filter <trimmomatic|scythe|bbtools|derek-bbduk>
                        Choice of qc-filter.  The default is to use Trimmomatic.
                        The 'old' way of using scythe and sickle is still supported.
                        bbtools mode uses JGI's rqcfilter2 pipeline from the
                        BBTools/BBMap package, derek-bbduk is Derek's bbduk workflow
                        using the bbduk tool from the same package.
      --rqcfilterdata PATH
                        When using -F bbtools, sets path to directory containing
                        the reference data for BBTool's rqcfilter2.
                        The default is /reference-data/bbtools/RQCFilterData
  -t N, --threads N, --cpus N
                        Number of parallel threads to employ (for Trimmomatic)
"
MORE_HELP="
qc implements the QC part of the Geomicro Illumina Reads Pipline.  At each
invocation qc will clean the directory of what the script thinks are previously
generated files.

qc is part of the omics(1) tool chain.
"
SHORT_OPTIONS=a:,f:,r:,t:,F:
LONG_OPTIONS=clean-only,adapters:,filter:,fwd:,rev:,final:,keep-all,no-dereplicate,rqcfilterdata:,threads:,cpus:
}

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	    (-f|--fwd)
		FWD_FASTQ=$2
		return 2;;
	    (-r|--rev)
		REV_FASTQ=$2
		return 2;;
	    (--final)
		FINAL=$2
		return 2;;
	    (-a|--adapters)
		ADAPTERS=$2
		return 2;;
	    (--clean-only)
	        CLEAN_ONLY=true
	        return 1;;
	    (--keep-all)
	        KEEPALL=true
	        return 1;;
	    (--no-dereplicate)
	        DEREPLICATION=false
	        return 1;;
            (-F|--filter)
                FILTER=$2
                return 2;;
            (--rqcfilterdata)
                RQCFILTERDATA=$2
                return 2;;
            (-t|--threads|--cpus)
                CPUS=$2
                return 2;;
        esac
    else
        return 0
    fi
}

##########################
# default variable values
##########################

# Set adapter file depending on server (for scythe only)
ADAPTERS_DEBIAN=/usr/share/trimmomatic/TruSeq3-PE-2.fa
ADAPTERS_FLUX=/sw/lsa/centos7/trimmomatic/0.36/adapters/TruSeq3-PE-2.fa
ADAPTERS_VONDAMM=/opt/packages/Trimmomatic/0.32/adapters/TruSeq3-PE-2.fa

set_default_scythe_adapters () {
    while [ $# -gt 0 ] && [ ! -r "$1" ]; do
        shift
    done
    ADAPTERS_SCYTHE=${1:-}
}
set_default_scythe_adapters $ADAPTERS_DEBIAN $ADAPTERS_FLUX $ADAPTERS_VONDAMM

ADAPTERS_TRIMMOMATIC=$RESOURCE_DIR/TruSeq3-PE-2+omics.fa
# Default rqcfilter2 data will work on omics container
RQCFILTERDATA=/reference-data/bbtools/RQCFilterData
ADAPTERS_BBDUK="$RQCFILTERDATA"/adapters2.fa.gz

# default input files as produced by prep script
FWD_FASTQ=fwd.fastq
REV_FASTQ=rev.fastq
#
CLEAN_ONLY=false
# infix for final output files
FINAL=good
# Remove intermediate results by default
KEEPALL=false
#
DEREPLICATION=true
# Use Trimmomatic filtering step by default, alternatives are scythe (and sickle) and bbtools
FILTER=trimmomatic
#
DEFAULT_CPUS=2

## shellcheck source=../lib/liba.sh
# shellcheck disable=SC1090
. "$RESOURCE_DIR/liba.sh" || (echo "Failed to source script library"; exit 1)

info1 () { info "[$(basename "$PWD")] $1" ; }
warning1 () { warning "[$(basename "$PWD")] $1" ; }
error1 () { error "[$(basename "$PWD")] $1" ; }
abort1 () { abort "[$(basename "$PWD")] $1" ; }

# mangle verbosity args
[[ -v V ]] && if [[ -n "$V" ]]; then V=("$V"); else V=(); fi

if [[ ! -v ADAPTERS ]]; then
    if [[ $FILTER == trimmomatic ]]; then
        ADAPTERS=$ADAPTERS_TRIMMOMATIC
    elif [[ $FILTER == scythe ]]; then
        ADAPTERS=$ADAPTERS_SCYTHE
    elif [[ $FILTER == derek-bbduk ]]; then
        ADAPTERS=$ADAPTERS_BBDUK
    fi
fi

# use available cores on slurm job
if [[ -v SLURM_JOB_CPUS_PER_NODE && ! -v CPUS ]]; then
    echo "Detected running as SLURM job, using $SLURM_JOB_CPUS_PER_NODE CPUs"
    CPUS=${SLURM_JOB_CPUS_PER_NODE}
fi

[[ -v CPUS ]] || CPUS=$DEFAULT_CPUS

# handle non-option parameters
if [ "$#" -gt 0 ]; then
    abort1 "Unknown parameters: ${*}"
fi

#########################
# some input sanitation
#########################
if ! [[ $FILTER =~ (bbtools|derek-bbduk|scythe|trimmomatic) ]]; then
    abort1 "unsupported filter option: \"$FILTER\", allowed are: scythe, trimmomatic, bbtools, derek-bbduk"
fi
if [[ $FILTER == bbtools ]] || [[ $FILTER == derek-bbduk ]]; then
    [ -d "$RQCFILTERDATA" ] || abort1 "Reference data for rqcfilter2 not found: $RQCFILTERDATA"
fi
if [[ $FILTER == scythe || $FILTER == trimmomatic || $FILTER == derek-bbduk ]]; then
    [ -r "$ADAPTERS" ] || abort1 "Adapters file not found: $ADAPTERS"
    [ "$VERBOSITY" -lt 2 ] || info1 "Using adapters file: $ADAPTERS"
fi
[ -r "$FWD_FASTQ" ] || abort1 "Forward reads file not found: $FWD_FASTQ"
[ -r "$REV_FASTQ" ] || abort1 "Reverse reads file not found: $REV_FASTQ"

input_basename () {
    # helper function to be like a multi-suffix basename
    # allows fq/fastq with optional gz or zst compression
    basename "$1" | sed -r "s/($(echo .{fq,fastq}{,.gz,.zst} | sed 's/ /|/g'))$//"
}

#################################
# do stuff
################################

# get root of input file names
fwd=$(input_basename "$FWD_FASTQ")
rev=$(input_basename "$REV_FASTQ")
[ "$fwd" != "$rev" ] || abort1 "Forward and reverse reads filenames have same basename: $fwd"

clean_all () {
    clean_some all
    # clean all final results
    $RM -rf -- FASTQC rqcfilter2_out
}

clean_some () {
    # only clean files that are about to be re-created in a regular run
    # TODO: add intermediate files?
    local all=false
    [[ $# -gt 0 && $1 == all ]] && all=true
    $all || info1 "Removing previously generated results..."
    $RM -rf -- FASTQC/"${fwd}"_* FASTQC/"${rev}"_*
    $RM -rf -- FASTQC/"${fwd}.${FINAL}"_* "FASTQC/${rev}.${FINAL}"_*
    [[ -d FASTQC ]] && rmdir --ignore-fail-on-non-empty FASTQC
    $RM -f -- {int,$fwd,$rev}."$FINAL".fastq
    if [[ $FILTER == scythe || $all ]]; then
       $RM -f -- {$fwd,$rev}{.derep,}.{matches,scythe}.fastq
       $RM -f -- {$fwd,$rev}.derep.fastq

    fi
    if [[ $FILTER == trimmomatic || $all ]]; then
        $RM -f -- {$fwd,$rev}{.derep,}.trim.s.fastq
        $RM -f -- {$fwd,$rev}.derep.fastq
    fi
    if [[ $FILTER == bbtools || $all ]]; then
        $RM -rf -- rqcfilter2_out
    fi
    if [[ $FILTER == derek-bbduk || $all ]]; then
        $RM -f -- rtrim_fwd.fastq
        $RM -f -- adtrim_clean_fwd.fastq
        $RM -f -- adtrim_clean_rev.fastq
        $RM -f -- adtrim_clean_qtrim_rev.fastq
        $RM -f -- adtrim_clean_qtrim_rev.derep.fastq
        $RM -f -- adtrim_rev.fastq
        $RM -f -- rtrim_rev.fastq
        $RM -f -- phix_clean_stats.txt
        $RM -f -- phix174_ill.ref.fa
        $RM -f -- PhiX_matched.fastq
        $RM -f -- adtrim_fwd.fastq
        $RM -f -- adtrim_clean_qtrim_fwd.fastq
        $RM -f -- adtrim_clean_qtrim_fwd.derep.fastq
    fi
}


if $CLEAN_ONLY; then
    clean_all 
    exit
fi

clean_up () {
    # kill background jobs not marked "Done"
    j_long=$(jobs -l | grep -v Done || true)
    if [[ -n $j_long ]]; then
        echo "$j_long"
        warning1 "The QC pipeline may not have finish properly"
        warning1 "Still running background processes will be terminated, list follows, see for possible error below:"
        echo "$j_long"
    fi
    jobs  # clear jobs messages as not to trigger kill of finished jobs
    for j in $(jobs -p); do
        ps -"$j" || true
        error1 "Terminating pid $j -> $(echo "$j_long" | grep "$j" || true)"
        kill -s 15 "$j" || true
    done
    # clean temp data
    if [[ -v tmpd ]]; then
        info1 "Used $(du -hs "$tmpd" || echo '??') temporary data"
        $KEEPALL || info1 "Erasing intermediate results (keep them with --keep-all)..."
        debug "$(ls -Rlrth "$tmpd")"
        $RM -rf -- "$tmpd"
    fi
    info1 "Cleanup done"
}
trap clean_up EXIT

# set up temp dir
tmpd=$(mktemp -d)
debug "Using temp dir: $tmpd"

# decompress input as needed and set output compression mode
COMPRESS_GZ=false
COMPRESS_ZST=false
if [[ "$FWD_FASTQ" =~ .gz$ ]]; then
    COMPRESS_GZ=true
    unpigz -c -p "$CPUS" "$FWD_FASTQ" > "$tmpd/$fwd.fastq"
    FWD_FASTQ="$tmpd/$fwd.fastq"
elif [[ "$FWD_FASTQ" =~ .zst$ ]]; then
    unzstd -c "$FWD_FASTQ" > "$tmpd/$fwd.fastq"
    FWD_FASTQ="$tmpd/$fwd.fastq"
    COMPRESS_ZST=true
fi
if [[ "$REV_FASTQ" =~ .gz$ ]]; then
    COMPRESS_GZ=true
    unpigz -c -p "$CPUS" "$REV_FASTQ" > "$tmpd/$rev.fastq"
    REV_FASTQ="$tmpd/$rev.fastq"
elif [[ "$REV_FASTQ" =~ .zst$ ]]; then
    unzstd -c "$REV_FASTQ" > "$tmpd/$rev.fastq"
    REV_FASTQ="$tmpd/$rev.fastq"
    COMPRESS_ZST=true
fi

# estimate tmp space needs
# TODO: re-evaluate this
declare -i size_reads tmp_avail expected
size_reads=$(stat --print=%s "$FWD_FASTQ")
expected=$((size_reads*20))
tmp_avail=$(df --output=avail "$tmpd" | grep '[0-9]')
tmp_avail=$((tmp_avail*1024))
# fwd input data size in bytes x20 to anticipate ten-fold increase
# compare to available which df delivers in kbytes
if [[ $expected -gt $tmp_avail ]]; then
    warning1 "There may not be sufficient space for your temporary files:"
    warning1 "Available at $tmpd: $tmp_avail bytes, expected need: $expected"
fi

# clean up first
clean_some

$MKDIR -p FASTQC
info1 "Starting pre-QC fastqc..."
fastqc_log=FASTQC/fastqc.log
fastqc -o FASTQC -f fastq -t 2 "$FWD_FASTQ" "$REV_FASTQ" &> $fastqc_log &

# basename for files
base=""

# trim_in is what derep puts out, input for trimming

if $DEREPLICATION && [[ $FILTER != bbtools ]] && [[ $FILTER != derek-bbduk ]]; then
    info1 "Starting derep..."
    base=".derep"
    fwd_derep_out=$tmpd/$fwd$base.fastq
    rev_derep_out=$tmpd/$rev$base.fastq

    fwd_trim_in=$fwd_derep_out
    rev_trim_in=$rev_derep_out

    python3 -m omics.derep "${V[@]}" --check "$FWD_FASTQ" "$REV_FASTQ" --out-dir "$tmpd"

    if $KEEPALL; then
        cp -p "${V[@]}" -- "$fwd_derep_out" "$fwd$base.fastq"
        cp -p "${V[@]}" -- "$rev_derep_out" "$rev$base.fastq"
    fi
else
    fwd_trim_in=$FWD_FASTQ
    rev_trim_in=$REV_FASTQ
fi

oldbase=$base
tmp_fwd_final=$tmpd/$fwd.$FINAL.fastq
tmp_rev_final=$tmpd/$rev.$FINAL.fastq
tmp_int_final=$tmpd/int.$FINAL.fastq

if [[ $FILTER == trimmomatic ]]; then
    base="${base}.trim"
    fwd_trim_s=$tmpd/$fwd$base.s.fastq
    rev_trim_s=$tmpd/$rev$base.s.fastq

    info1 "Start adapter + quality trimming..."


    TrimmomaticPE \
        -threads "$CPUS" \
        "$fwd_trim_in" "$rev_trim_in" \
        "$tmp_fwd_final" "$fwd_trim_s" "$tmp_rev_final" "$rev_trim_s" \
        ILLUMINACLIP:"$ADAPTERS":2:30:10:1:true \
        LEADING:3 TRAILING:3 \
        SLIDINGWINDOW:4:20 \
        MINLEN:20

    # re-pair singles
    info1 "Pairing up singles and adding to Trimmomatic output..."
    cat "$fwd_trim_s" >> "$tmp_fwd_final"
    grep -E '^@[^ ]+:[0-9]+:[0-9]+ 1' "$fwd_trim_s" | sed -r 's/ 1/ 2/; s/$/\nN\n+\n!/' >> "$tmp_rev_final"
    cat "$rev_trim_s" >> "$tmp_rev_final"
    grep -E '^@[^ ]+:[0-9]+:[0-9]+ 2' "$rev_trim_s" | sed -r 's/ 2/ 1/; s/$/\nN\n+\n!/' >> "$tmp_fwd_final"

elif [[ $FILTER == scythe ]]; then
    info1 "Start adapter trimming..."
    base="${base}.scythe"
    # FIXME: simplify the piping since we don't ointerleave here anymore
    fwd_scythe_out=$tmpd/$fwd$base.fastq
    rev_scythe_out=$tmpd/$rev$base.fastq
    mkfifo "$fwd_scythe_out" "$rev_scythe_out"
    scythe -a "$ADAPTERS" -q sanger -m "$fwd${oldbase}.matches.fastq" -o "$fwd_scythe_out" "$fwd_trim_in" &
    scythe -a "$ADAPTERS" -q sanger -m "$rev${oldbase}.matches.fastq" -o "$rev_scythe_out" "$rev_trim_in" &
    if $KEEPALL; then
        fwd_sickle_in=$tmpd/fwd.int_in.fastq
        rev_sickle_in=$tmpd/rev.int_in.fastq
        mkfifo "$fwd_sickle_in" "$rev_sickle_in"
        # shellcheck disable=SC2094
        tee "./$(basename "$fwd_scythe_out")" < "$fwd_scythe_out" > "$fwd_sickle_in" &
        # shellcheck disable=SC2094
        tee "./$(basename "$rev_scythe_out")" < "$rev_scythe_out" > "$rev_sickle_in" &
    else
        fwd_sickle_in=$fwd_scythe_out
        rev_sickle_in=$rev_scythe_out
    fi
    info1 "Start quality score trimming..."
    oldbase=$base
    base="${base}.sickle"
    # TODO: do not throw away singles
    sickle pe -t sanger -f "$fwd_sickle_in" -r "$rev_sickle_in" -o "$tmp_fwd_final" -p "$tmp_rev_final" -s "$tmpd/singles${base}.fastq"

elif [[ $FILTER == bbtools ]]; then
    base=$base.rqcfilter

    info1 "Running BBTools' QC pipeline..."

    rqcfilter2_out=rqcfilter2_out
    mkdir -p -- "$rqcfilter2_out"
    rqcfilter2_args=(
        in1="$fwd_trim_in"
        in2="$rev_trim_in"
        out="$(basename "$tmp_int_final")"
        pigz=f
        path="$rqcfilter2_out"
        rqcfilterdata="$RQCFILTERDATA"
        barcodefilter=f
        qtrim=rl
        trimq=15
        minlength=20
        threads="$CPUS"
    )
    if $DEREPLICATION; then
        rqcfilter2_args+=(
            clumpify=t
            dedupe=t
            opticaldupes=t
        )
    fi
    if [[ -v OMICS_PBS_REQ_MEM ]]; then
        # use available memory for PBS jobs if provided, should be in nnnnnnkb format
        # TODO: use 90% only?
        rqcfilter2_args+=("-Xmx$OMICS_PBS_REQ_MEM" -eoom)
    fi
    rqcfilter2 "${rqcfilter2_args[@]}" |& tee "$rqcfilter2_out"/log

    info1 "Separating read directions..."
    separate-interleaved "${V[@]}" -f "$tmp_fwd_final" -r "$tmp_rev_final" "rqcfilter2_out/$(basename "$tmp_int_final")"
    rm "${V[@]}" -- "rqcfilter2_out/$(basename "$tmp_int_final")"

elif [[ $FILTER == derek-bbduk ]]; then
    base=$base.derek-bbduk

    # adapted from Derek's bbmap_qc.sh
    info1 "Removing 3' adapters"
    bbduk in1="$fwd_trim_in" in2="$rev_trim_in" out1="$tmpd"/rtrim_fwd.fastq out2="$tmpd"/rtrim_rev.fastq ref="$ADAPTERS" ktrim=r k=21 mink=8 hdist=2 ftm=5 tpe tbo threads="$CPUS"

    # Now Remove 5' adapters, allowing 2 mismatches, trim paired ends to equal length:
    info1 "Removing 5' adapters"
    bbduk in1="$tmpd"/rtrim_fwd.fastq in2="$tmpd"/rtrim_rev.fastq out1="$tmpd"/adtrim_fwd.fastq out2="$tmpd"/adtrim_rev.fastq ref="$ADAPTERS" ktrim=l k=21 mink=8 hdist=2 tpe threads="$CPUS"

    # Screen for kmers of length 31 that match PhiX (a standard Illumina spike-in) and remove them from reads:
    info1 "Remove PhiX spike-in reads"
    gunzip -c "$RQCFILTERDATA"/phix174_ill.ref.fa.gz > "$tmpd"/phix174_ill.ref.fa
    bbduk in1="$tmpd"/adtrim_fwd.fastq in2="$tmpd"/adtrim_rev.fastq out1="$tmpd"/adtrim_clean_fwd.fastq out2="$tmpd"/adtrim_clean_rev.fastq outm=PhiX_matched.fastq ref="$RQCFILTERDATA"/phix174_ill.ref.fa.gz k=31 hdist=1 stats=phix_clean_stats.txt threads="$CPUS"
    $RM -f -- "$tmpd"/phix174_ill.ref.fa

    # Trim bases with Phred quality score below 15. After trimming remove reads with length <70 bp:
    info1 "Quality trim bases with Q score below 15"
    bbduk in1="$tmpd"/adtrim_clean_fwd.fastq in2="$tmpd"/adtrim_clean_rev.fastq out1="$tmpd"/adtrim_clean_qtrim_fwd.fastq out2="$tmpd"/adtrim_clean_qtrim_rev.fastq qtrim=rl trimq=15 minlen=75 threads="$CPUS"

    # Dereplicate read pairs that are 100% identical:
    info1 "Deduplicating"
    omics derep "$tmpd"/adtrim_clean_qtrim_fwd.fastq "$tmpd"/adtrim_clean_qtrim_rev.fastq -o "$tmpd" -v

    # rename to expected file names
    mv -- "$tmpd"/adtrim_clean_qtrim_fwd.derep.fastq "$tmp_fwd_final"
    mv -- "$tmpd"/adtrim_clean_qtrim_rev.derep.fastq "$tmp_rev_final"

else
    abort1 "Bad argument for --filter option, available alternatives are: trimmomatic scythe bbtools derek-bbduk"
fi

oldbase=$base
base=".$FINAL"
fwd_final=$(basename "$tmp_fwd_final")
rev_final=$(basename "$tmp_rev_final")

info1 "Starting post-QC fastqc run..."
fastqc -o FASTQC -f fastq -t 2 "$tmp_fwd_final" "$tmp_rev_final" &>> $fastqc_log &

# wait for fastqc to start, at most one minute, then start moving files:
sleep 2
SECONDS=0
while true; do
    grep -q "$fwd_final" $fastqc_log && break
    grep -q "$rev_final" $fastqc_log && break
    if [[ $SECONDS -gt 60 ]]; then
        warning1 "Waited 60s for fastqc to start, will proceed moving final good data"
        break
    fi
    sleep 10
done

out_compress_gz () {
    pigz -c -p "$CPUS" "${V[@]}" "$1" > "$2" && rm "${V[@]}" -- "$1"
}
out_compress_zst () {
    zstd -c --rm "${V[@]}" "$1" > "$2"
}

{
    if $COMPRESS_GZ; then
        out_compress_gz "$tmp_fwd_final" "$fwd_final".gz
        out_compress_gz "$tmp_rev_final" "$rev_final".gz
    elif $COMPRESS_ZST; then
        out_compress_zst "$tmp_fwd_final" "$fwd_final".zst
        out_compress_zst "$tmp_rev_final" "$rev_final".zst
    else
        mv "${V[@]}" -- "$tmp_fwd_final" "$fwd_final"
        mv "${V[@]}" -- "$tmp_rev_final" "$rev_final"
    fi
} &

if $KEEPALL; then
    info1 "Saving intermediate files..."
    # ignore final files, no-op when empty otherwise
    find "$tmpd" -type f -not -name "$fwd_final" -not -name "$rev_final" -print0 | xargs -r -0 mv "${V[@]}" -n -t ./ --
fi
jobs_running=$(jobs | grep Running || true)
if [[ -n "$jobs_running" ]]; then
    info1 "Still waiting for copy jobs to finish:"
    info1 "$jobs_running"
fi
wait
jobs
info1 "QC done, cleaning up..."


# gmb: input: fwd.fastq
# gmb: input: rev.fastq
# gmb: output: good_int.fasta
# gmb: cpus: 2
