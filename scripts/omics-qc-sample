#!/bin/bash
#
# Copyright (c) 2017 Regents of The University of Michigan.
# All Rights Reserved.
#
# Author: Robert <heinro@med.umich.edu>
#

set -e
# shellcheck disable=SC2034
{
USAGE="[OPTIONS]..."
HELP="quality control for a sample's fastq files"
ARG_HELP="
  -f, --fwd             Fastq file with forward reads, default is fwd.fastq
  -r, --rev             Fastq file with reverse reads default is rev.fastq
      --final INFIX     Infix used for final output files.  Default is 'good'
      --clean-only      Delete previously created files and stop.
  -a, --adapters=FILE   Specifies the adapters file to be used.  By default the
                        Illumina adapter file TruSeq3-PE-2.fa as distributed by
			the Trimmomatic project will be used.
      --keep-all	Keep all intermediate files, by default some not-so-important
			intermediate results will be deleted to save disk space
      --less-mem        Use less memory during de-replication at the expense of
                        computing time

      --no-dereplicate  Skip the de-replication step
      --no-fasta-interleave
                        Skip building the interleaved fasta file,
                        interleaved fastq will still be build.  This option is
                        redundant when --no-interleaved is used.
"
MORE_HELP="
qc implements the QC part of the Geomicro Illumina Reads Pipline.  At each
invocation qc will clean the directory of what the script thinks are previously
generated files.

qc is part of the omics(1) tool chain.
"
CHECK_PROGS="fastqc scythe sickle interleave"
SHORT_OPTIONS=a:,f:,r:
LONG_OPTIONS=clean-only,adapters:,fwd:,rev:,final:,keep-all,no-dereplicate,no-fasta-interleave
}

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	    (-f|--fwd)
		FWD_FASTQ=$2
		return 2;;
	    (-r|--rev)
		REV_FASTQ=$2
		return 2;;
	    (--final)
		FINAL=$2
		return 2;;
	    (-a|--adapters)
		ADAPTERS=$2
		return 2;;
	    (--clean-only)
	        CLEAN_ONLY=true
	        return 1;;
	    (--keep-all)
	        KEEPALL=true
	        return 1;;
	    (--no-dereplicate)
	        DEREPLICATION=false
	        return 1;;
	    (--no-fasta-interleave)
	        INTERLEAVE_FASTA=false
	        return 1;;
        esac
    else
        return 0
    fi
}

##########################
# default variable values
##########################

# Set adapter file depending on server
ADAPTERS_DEBIAN=/usr/share/trimmomatic/TruSeq3-PE-2.fa
ADAPTERS_FLUX=/sw/lsa/centos7/trimmomatic/0.36/adapters/TruSeq3-PE-2.fa
ADAPTERS_VONDAMM=/opt/packages/Trimmomatic/0.32/adapters/TruSeq3-PE-2.fa

set_default_adapters () {
    while [ $# -gt 0 ] && [ ! -r "$1" ]; do
        shift
    done
    ADAPTERS=$1
}
set_default_adapters $ADAPTERS_DEBIAN $ADAPTERS_FLUX $ADAPTERS_VONDAMM

# default input files as produced by prep script
FWD_FASTQ=fwd.fastq
REV_FASTQ=rev.fastq
#
CLEAN_ONLY=false
# infix for final output files
FINAL=good
# Remove intermediate results by default
KEEPALL=false
#
DEREPLICATION=true
INTERLEAVE_FASTA=true

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)

info1 () { info "[$(basename "$PWD")] $1" ; }
abort1 () { abort "[$(basename "$PWD")] $1" ; }

# handle non-option parameters
if [ "$#" -gt 0 ]; then
    abort1 "Unknown parameters: ${*}"
fi

#########################
# some input sanitation
#########################
[ -r "$ADAPTERS" ] || abort1 "Adapters file not found: $ADAPTERS"
[ "$VERBOSITY" -lt 2 ] || info1 "Using adapters file: $ADAPTERS"
[ -r "$FWD_FASTQ" ] || abort1 "Forward reads file not found: $FWD_FASTQ"
[ -r "$REV_FASTQ" ] || abort1 "Reverse reads file not found: $REV_FASTQ"

#################################
# do stuff
################################

# get root of input file names
fwd=$(basename "$FWD_FASTQ" .fastq)
rev=$(basename "$REV_FASTQ" .fastq)
[ "$fwd" != "$rev" ] || abort1 "Forward and reverse reads filenames are equal?"

clean_all () {
    clean_intermediates
    # clean final results
    $RM -rf -- FASTQC
    $RM -f -- {"$fwd","$rev"}{.derep,}.scythe.sickle.fastq
    $RM -f -- int."$FINAL".fast{a,q} {"$fwd","$rev"}."$FINAL".fastq
}

clean_intermediates () {
    # clean up intermediate results
    $RM -f -- {"$fwd","$rev"}.derep.fastq
    $RM -f -- {"$fwd","$rev"}{.derep,}.scythe.fastq
    $RM -f -- {"$fwd","$rev"}{.derep,}_matches.fastq
    $RM -f -- {"$fwd","$rev"}.clust{.list,}
}


clean_all
! $CLEAN_ONLY || exit 0

$MKDIR -p FASTQC
info1 "pre-QC fastqc running..."
fastqc -o FASTQC -f fastq -t 2 "$FWD_FASTQ" "$REV_FASTQ" &> FASTQC/fastqc.log &

# basename for files
base=""

if $DEREPLICATION; then
    info1 "dereplicating..."
    base=".derep"
    python3 -m omics.derep --check "$FWD_FASTQ" "$REV_FASTQ"
fi

info1 "adapter trimming..."
oldbase=$base
base="${base}.scythe"
scythe -a "$ADAPTERS" -q sanger -m "$fwd${oldbase}.matches.fastq" -o "$fwd$base.fastq" "$fwd$oldbase.fastq" &
scythe -a "$ADAPTERS" -q sanger -m "$rev${oldbase}.matches.fastq" -o "$rev$base.fastq" "$rev$oldbase.fastq"
wait %scythe
! $DEREPLICATION || $KEEPALL || rm -f -- "$fwd$oldbase.fastq" "$rev$oldbase.fastq"
info1 "interleaving reads..."
interleave -fastq -fwd "$fwd$base.fastq" -rev "$rev$base.fastq" -infix "${base#.}"
info1 "quality score trimming..."
oldbase=$base
base="${base}.sickle"
sickle pe -t sanger -c "int$oldbase.fastq" -M "int$base.fastq"
$KEEPALL || rm -f -- "int$oldbase.fastq"

oldbase=$base
base=".$FINAL"
ln "int$oldbase.fastq" "int$base.fastq"

if $INTERLEAVE_FASTA; then
    info1 "Making interleaved fasta..."
    python3 -m omics.fastq2fasta < "int$base.fastq" > "int$base.fasta" &
fi

info1 "Generate final set of separate read fastq files..."
separate-interleaved -f "$fwd$base.fastq" -r "$rev$base.fastq" "int$base.fastq"

wait %fastqc
info1 "post-QC fastqc run..."
fastqc -o FASTQC -f fastq -t 2 {"$fwd","$rev"}."$base".fastq &>> FASTQC/fastqc.log &
wait %fastqc
wait %python3
$KEEPALL || rm -f -- "$fwd$oldbase.fastq" "$rev$oldbase.fastq"
$KEEPALL || clean_intermediates
info1 "Done!"


# gmb: input: fwd.fastq
# gmb: input: rev.fastq
# gmb: output: good_int.fasta
# gmb: cpus: 2
