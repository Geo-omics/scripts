#!/usr/bin/perl

# Copyright 2015, 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.


=head1 NAME

coveragePerBin - Do this.


=head1 SYNOPSIS

B<coveragePerBin>


=head1 DESCRIPTION

Do this.


=head1 OPTIONS

=over 8

=item B<-conf> I<FILE>

Concatenated confidence file. # make sure you've used the loyalty scores in getClassFasta.

=item # This script won't handle scaffold mapping to multiple bins.

=item B<-cov> I<FILE>

Sample Scaffold file.

=item B<-prefix> I<TEXT>

Prefix that should be used for scaffold names in the `-cov` file.

=item B<-out> I<TEXT>

Output file name.

=item B<-min> I<INT>

Only count scaffolds with cov >= min; default=0

=item B<-version>, B<-v> I<BOOLEAN>

version of the current script

=item B<-help>, B<-h> I<BOOLEAN>

This message.

=back


=head1 AUTHOR

Sunit Jain, (Fri Jul 17 13:19:32 EDT 2015)
sunitj [AT] umich [DOT] edu


=head1 SEE ALSO

L<omics(1)>, L<illumina-reads-processing(7)>

=head2 Other local resources

=over

=item [1]

L<HTML documentation|file:///usr/share/doc/geo-omics-scripts/html/index.html>

=item [2]

L<Omics workflow documentation [PDF]|file:///usr/share/doc/geo-omics-scripts/Geomicro-Illumina-Reads-Processing-Pipeline.pdf>

=back

=head2 Web

=over

=item [3]

L<Workflow documentation [PDF]|https://drive.google.com/open?id=0BxFSivK8RfJed05wamtrbEVUeE0>

=item [4]

L<Website|http://www.earth.lsa.umich.edu/geomicrobiology/>

=item [5]

L<Github repository|https://github.com/Geo-omics/scripts>

=back

=cut

use strict;
use Getopt::Long;
use FileHandle;
use File::Basename;

my $minCov=0;
my ($confFile,$covFile,$prefix,$outFile);
my $help;
my $version=fileparse($0)."\tv0.0.1";
GetOptions(
    'conf:s'=>\$confFile,
    'cov:s'=>\$covFile,
    'prefix:s'=>\$prefix,
    'out:s'=>\$outFile,
    'min:i'=>\$minCov,
	'v|version'=>sub{print $version."\n"; exit;},
	'h|help'=>sub{system("perldoc $0 \| cat"); exit;},
);
print "\# $version\n";

my %binHash;
my %errorTrigger;
my $CONF=FileHandle->new();
open( $CONF, "<", $confFile) || die $!;
while(my $line=<$CONF>){
    next if ($line=~ /^#/);
    chomp $line;
    next unless $line;
    
    my($bin,$scaffold,$conf)=split(/\t/, $line);
    
    if (($binHash{$scaffold}) && ($binHash{$scaffold} != $bin)){
        $errorTrigger{$scaffold}{$binHash{$scaffold}}++;
        $errorTrigger{$scaffold}{$bin}++
    }
    
    $binHash{$scaffold}=$bin;
}
close $CONF;

if (scalar(keys %errorTrigger) > 0) {
    my $numOfChar=80;
    my $error=("-" x $numOfChar)."\n";
    $error.="[ERROR] Scaffold assigned to multiple bins!\n";
    $error.="Can't decide which bin to add it to.\n";
    $error.="Use the `getClassFasta' script with a loyalty value >= 51 (recommend: 60)\n";
    $error.="Here are the offending scaffolds and their bins:\n";
    foreach my $scaffold(keys %errorTrigger){
        $error.="$scaffold";
        foreach my $bin(keys %{$errorTrigger{$scaffold}}){
            $error.="\t$bin";
        }
        $error.="\n";
    }
    $error.=("-" x $numOfChar)."\n";
    die $error;
}



my %binCov;
my $COV=FileHandle->new();
open( $COV, "<", $covFile) || die $!;
while(my $line=<$COV>){
    next if ($line=~ /^#/);
    chomp $line;
    next unless $line;
    
    my($scaffoldName,$avgCov,$len)=split(/\t/, $line);
    next if ($avgCov < $minCov);
    
    my $scaffold=$prefix.$scaffoldName;
    next unless $binHash{$scaffold};
    
    my $bin= $binHash{$scaffold};
    $binCov{$bin}{"COV"}+=$avgCov;
    $binCov{$bin}{"COUNT"}++;
}
close $COV;

my $OUT=FileHandle->new();
open( $OUT, ">", $outFile) || die $!;
print $OUT "#Bin\tCoverage\n";
foreach my $bin(keys %binCov){
    print "No scaffolds found for Bin: $bin\n" if ($binCov{$bin}{"COUNT"} == 0);
    print $OUT $bin."\t".($binCov{$bin}{"COV"}/$binCov{$bin}{"COUNT"})."\n";
}
close $OUT;

exit 0;
