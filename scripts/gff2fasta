#!/usr/bin/perl

# Copyright 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.


=head1 NAME

gff2fasta - Do this.


=head1 SYNOPSIS

B<gff2fasta> B<-gff> I<gff-file> B<-contig> I<fasta-file> B<-genes> I<output_fasta_file>


=head1 DESCRIPTION

Do this.


=head1 OPTIONS

=over 8

=item B<-prefix>, B<-p> I<prefix>

Uniq project identifier added before sequence header.

=item B<-genes>, B<-g> I<filename>

output fasta file

=item B<-gff> I<filename>

input GFF file

=item B<-contig>, B<-c> I<filename>

Contigs/Scaffolds Input

=item B<-version>, B<-v>

version of the current script

=item B<-help>, B<-h>

Print help.

=back


=head1 AUTHOR

Sunit Jain, (Fri Mar  6 12:18:22 EST 2015)

sunitj [AT] umich [DOT] edu


=head1 LICENSE

This script is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.


=head1 DISCLAIMER

This script is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


=head1 SEE ALSO

L<omics(1)>, L<illumina-reads-processing(7)>

=head2 Other local resources

=over

=item [1]

L<HTML documentation|file:///usr/share/doc/geo-omics-scripts/html/index.html>

=item [2]

L<Omics workflow documentation [PDF]|file:///usr/share/doc/geo-omics-scripts/Geomicro-Illumina-Reads-Processing-Pipeline.pdf>

=back

=head2 Web

=over

=item [3]

L<Workflow documentation [PDF]|https://drive.google.com/open?id=0BxFSivK8RfJed05wamtrbEVUeE0>

=item [4]

L<Website|http://www.earth.lsa.umich.edu/geomicrobiology/>

=item [5]

L<Github repository|https://github.com/Geo-omics/scripts>

=back

=cut

use strict;
use Getopt::Long;
use FileHandle;
use File::Basename;

use Bio::SeqIO;

my $help;
my $version=fileparse($0)."\tv0.1.1";
my $verbose = 0;
my ($quiet, $contigFile, $prefix, $gffFile, $outFile);
GetOptions(
	'prefix:s'=>\$prefix,
	'g|genes:s'=>\$outFile,	
	'gff:s'=>\$gffFile,
	'c|contig:s'=>\$contigFile,
	'q|quiet'=>\$quiet,
	'v|version'=>sub{print $version."\n"; exit;},
	'h|help'=>sub{system("perldoc $0 \| cat"); exit;},
);
print "\# $version\n";

## read in gff 
warn "reading GFF\n";
 
my %gff;
my $GFF=FileHandle->new();
open ($GFF, '<', $gffFile) || die "fail\n";
 
while(<$GFF>){
  my ($seqid, undef, undef, $start, $end,
      undef, undef, undef, $attrs) = split(/\t/);
 
  push @{$gff{$seqid}}, [$start, $end, $attrs];
}
 
warn "OK\n";
 
 
 
## Do the fasta
my $GENES=FileHandle->new();
open( $GENES, ">", $outFile) || die $!;
$verbose=-1 if ($quiet);
my $seqio = Bio::SeqIO->new(	-file => $contigFile,
								-format => 'fasta',
								-verbose=> $verbose )
							|| die "double fail\n";

while(my $sobj = $seqio->next_seq){
  my $seqid = $sobj->id;
 
  unless(defined($gff{$seqid})){
    warn "no features for $seqid\n";
    next;
  }
 
  my $seq = $sobj->seq;
 
  for(@{$gff{$seqid}}){
    my ($start, $end, $attrs) = @$_;
 
    warn join("\t", $start, $end, $attrs), "\n"
      if $verbose > 0;
 
    my %attrs = split(/=|;/, $attrs);
 
    print $GENES ">".($prefix ? $prefix."_" : "").$seqid."-". $attrs{"ID"}.
      "/$start-$end (". ($end-$start+1). ")\n";
 
    print $GENES substr($seq, $start, $end-$start+1), "\n";
  }
 
  #exit;
}
close $GENES; 
warn "OK\n";
