#!/usr/bin/env python3
"""
Fix POD in perl scripts
"""
import argparse
from collections import OrderedDict
import re
import sys


argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument('inputfile', type=argparse.FileType())
argp.add_argument('-w', '--write-to-file', action='store_true')

args = argp.parse_args()

header = re.compile(r'^\s*=head\d?\s+(?P<section_name>[\w/_. \'-]+)\s*$')
last_pod_line = re.compile(r'^\s*=cut\s*$')

begin = ''
pod = None
end = None
for line in args.inputfile:
    if end is not None:
        # in end state
        end += line
        continue

    if re.match(last_pod_line, line):
        # start end state
        end = line
        continue

    m = re.match(header, line)
    if pod is None:
        if m is None:
            # still in begin state
            begin += line
            continue
        else:
            # begin pod state
            pod = OrderedDict()

    # in pod state
    if m is None:
        # add line to section
        name, section = pod.popitem()
        line = line.strip()
        if line:
            section += line + '\n'
        else:
            # keep all empty line for now
            section += '\n'
        pod[name] = section
    else:
        # new section
        name = m.groups()[0]
        if name.isalpha():
            # leave non-standard header in original case
            name = name.upper()
        if name == 'USAGE':
            name = 'SYNOPSIS'
        pod[name] = ''  # do not include header line

if pod is None:
    print('no pod found:', args.inputfile.name)
    sys.exit()

# remove initial or final empty lines
for sec in pod:
    pod[sec] = pod[sec].strip() + '\n'

# add name section
if 'NAME' not in pod:
    if 'DESCRIPTION' in pod:
        pod['NAME'] = pod['DESCRIPTION']
    else:
        pod['NAME'] = args.inputfile.name + ' - '

if 'DESCRIPTION' in pod:
    pod['DESCRIPTION'] = re.sub(
        r'^' + args.inputfile.name + '(\.pl)?\s*-*\s*',
        '',
        pod['DESCRIPTION']
    )

options = []
if 'OPTIONS' in pod:
    optpat = re.compile(r'^(?P<opt>.*?)(?P<val>\<\w+\>)(?P<descr>.*)$')
    simplpat = re.compile(r'^(?P<opt>-\w+)(?P<descr>.*)$')
    new = '=over 8\n\n'
    for i in pod['OPTIONS'].splitlines():
        if not i.strip():
            continue
        m = re.match(optpat, i)
        if m is None:
            m = re.match(simplpat, i)
            if m is None:
                new += '=item ' + i + '\n\n'
                continue
            else:
                opt, descr = m.groups()
                val = ''
        else:
            opt, val, descr = m.groups()

        opt = opt.strip()
        opts = opt.split()
        options += opts
        opts = ', '.join(['B<{}>'.format(i) for i in opts])

        if val:
            val = ' I' + val  # val has <> already

        descr = descr.strip()

        new += '=item {}{}\n\n{}\n\n'.format(opts, val, descr)

    new += '=back\n'

    pod['OPTIONS'] = new

for sec in ['SYNOPSIS', 'EXAMPLE']:
    if sec in pod:
        pod[sec] = re.sub(
            r'perl ' + args.inputfile.name + '\.pl',
            args.inputfile.name,
            pod[sec]
        )
        # make program bold
        pod[sec] = re.sub(
            '(?<!\w)({})(?!\w)'.format(args.inputfile.name),
            'B<\\1>',
            pod[sec]
        )
        if options:
            # make options bold
            pod[sec] = re.sub(
                '({})'.format('|'.join(options)),
                'B<\\1>',
                pod[sec]
            )

if args.write_to_file:
    args.inputfile.close()
    outfile = open(args.inputfile.name, 'w')
else:
    outfile = sys.stdout


def write_section(name, text, file):
    file.write('=head1 {}\n\n{}\n\n'.format(name, text))


# write output
outfile.write(begin)

# write sections in correct order
for i in ['NAME', 'SYNOPSIS', 'DESCRIPTION', 'OPTIONS']:
    if i in pod:
        write_section(i, pod[i], outfile)
        del pod[i]

# write rest
for i in list(pod):
    write_section(i, pod[i], outfile)
    del pod[i]

outfile.write(end)
