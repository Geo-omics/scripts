#!/usr/bin/env python3

# Copyright 2020 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.

"""
Determine and remove uniquely-prevalent OTU/ASVs (aka singletons) from a
mothur shared file
"""
import argparse
from pathlib import Path
import sys

from omics.shared import MothurShared


def get_args():
    argp = argparse.ArgumentParser(description=__doc__)
    argp.add_argument(
        'infile',
        metavar='SHARED_FILE',
        type=argparse.FileType(),
        help='Input file, a mothur shared file',
    )
    argp.add_argument(
        '--tab-out',
        help='Also save a tab-delimited table of singleton ASVs/OTUs under '
             'the given file name',
    )
    argp.add_argument(
        '-o', '--out',
        help='Name of output shared file with singletons removed, by default '
             'a name will be generated based on the input file name',
    )
    argp.add_argument(
        '-t', '--threads',
        type=int,
        default=1,
        help='Number of threads to use for parallizable steps',
    )
    argp.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Force printing list of uniquely-prevalent OTUs to stdout.'
    )
    argp.add_argument('--version', action='version', version='%(prog)s '
                      'is part of geo-omics-scripts VERSION_PLACEHOLDER')
    args = argp.parse_args()
    return args


def info(*args, file=sys.stderr, flush=True, **kwargs):
    print(*args, file=file, **kwargs)


def main():
    args = get_args()

    info('loading shared file...')
    shared = MothurShared(args.infile, threads=args.threads)

    info('running sieve... ', flush=True, end='')
    uniques = dict(zip(shared.otus, (None for _ in range(shared.ncols))))
    for sample, row in shared.rows():
        for o, c in zip(shared.otus, row):
            if c > 0 and o in uniques:
                if uniques[o] is None:
                    uniques[o] = (sample, c)
                else:
                    del uniques[o]

    info(len(uniques), 'found')

    if args.tab_out is not None:
        uniques_s = sorted(uniques.items(), key=lambda x: (-x[1][1], x[1][0]))
        size = dict(zip(shared.samples, shared.sample_sizes))
        with Path(args.tab_out).open('w') as o:
            print('OTU', 'sample', 'count', 'sample_size', sep='\t', file=o)
            for otu, (sample, count) in uniques_s:
                print(otu, sample, count, size[sample], sep='\t', file=o,
                      flush=True)

    if args.out is None:
        outfname = Path(args.infile.name).name
        outfname = Path(outfname).with_suffix('.nup.shared')
    else:
        outfname = args.out

    info('removing singletons from data...')
    shared.remove_otus(uniques.keys())
    info('writing shared file...')
    shared.save(outfname)
    info('saved as:', outfname, file=sys.stderr)

    info('all done.')


if __name__ == '__main__':
    main()
