#!/bin/bash
#
# Copyright (c) 2018 Regents of The University of Michigan.
# All Rights Reserved.
#
# Author: Robert <heinro@med.umich.edu>
#

set -eEu

# Default name of image file
DEFAULT_IMAGE_NAME=omics.img
# Image file search paths
CONTAINER_PATH=(
"${PWD}"
/dept/geology/geomicro/data9/flux
/geomicro/data9/flux
/var/local/containers
)

# shellcheck disable=SC2034
{
USAGE="[OPTIONS...] [--] [COMMAND...]"
HELP="Get a bash shell or run command inside omics container"
ARG_HELP="
Options given to this script should be separated from the COMMAND
by a double dash, otherwise the COMMAND may be interpreted as
options with unintended consequences likely.

    COMMAND     Command line to execute inside the container environment.  If
                this is empty then a bash prompt will be provided.

    -B PATH, --bind PATH
                Mount path inside container.  On FLUX and the geomirco servers
                common storage will be available.
    -i <PATH>, --container-image <PATH>
                Full path to singularity container image.  By default
                image is $DEFAULT_IMAGE_NAME, search path is
                ${CONTAINER_PATH[*]}

    -k, --keep-env
                Keep environment (not really recommended,
                but purge any loaded environment modules)
    -m, --keep-env-modules
                Keep environment including environment modules loaded
                (not recommended, this causes host-container interactions)
    --norc      Do not use the omics container's default initialization file
                when starting bash (if no command is given). This is also
                singularity's default behaviour.
    --rcfile <file>
                Provide a file to initialize the bash shell.  This option will
                be passed to the bash shell if no command is given and the
                shell is invoked.
    -s <option>, --singularity-opt <option>
                Options passed on to singularity.  For instance,
                to additionally mount a path /some/path, add
                --singularity \"-B /some/path\" and the option
                -B /some-path will be appended to the call
                to 'singularity exec'.  The empty space between the
                option and its parameter must be protected by quotes
                to prevent premature word splitting by the shell.
    -u, --update
                Update the container specified by -i with its sandbox version
                located at /var/local/container/NAME.sandbox where NAME is the
                basename of the container image
    -w, --write Make container writable, requires sudo rights
                and a writable container image.

"
# SHORT_OPTIONS: start with + for posix correct scanning mode
# comics has no non-option arguments so, this way no -- is required before the
# command to stop getopt from rearranging any command arguments
SHORT_OPTIONS=+B:i:kms:uw
LONG_OPTIONS=bind:container-image:keep-env,kee-env-modules,norc,rcfile:,singularity-opt:,update,write
}

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
            (-B|--bind) MOUNT_POINTS+=("$2"); return 2;;
	    (-i|--container-image)
		IMAGE=$2
		return 2;;
            (-k|--keep-env) KEEP_ENV=true; return 1;;
            (-m|--keep-env-modules)
                KEEP_ENV=true;
                KEEP_ENV_MODULES=true;
                return 1;;
            (--norc) NORC=true; return 1;;
            (--rcfile) RCFILE=$2; return 2;;
	    (-s|--singularity)
                SINGULARITY_ARGS+=("$2")
		return 2;;
            (-w|--write)
                WRITE=true
                return 1;;
            (-u|--update)
                UPDATE=true
                return 1;;
        esac
    else
        return 0
    fi
}

if [[ -d /dept/geology/geomicro ]]; then
    geomicro_base=/dept/geology
else
    geomicro_base=
fi

##########################
# default variable values
##########################

# default will be generated below if needed
IMAGE=$DEFAULT_IMAGE_NAME
# use clean environment by default to reduce interactions betwen host and container
KEEP_ENV=false
KEEP_ENV_MODULES=false
# useful mounts for flux and geomicro servers, will only be used if they exist
# NOTE: assuming on flux /scratch and /nfs are mounted via /etc/../singularity.conf
#       including it here may produce two warnings each time comics is called
MOUNT_POINTS=(
/dept
"${geomicro_base}"/geomicro/data9/flux/reference-data:ro
"${geomicro_base}"/geomicro/data9/flux/reference-data:/reference-data:ro
)
NORC=false
RCFILE=/.singularity.d/specs/bashrc
SINGULARITY_ARGS=()
#
UPDATE=false
# read-only by default
WRITE=false

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo 1>&2 "Failed to source script library"; exit 1)

###############
# sanity check
###############

if [[ -n "${SINGULARITY_CONTAINER:-}" ]]; then
    _msg="Singularity container already running"
    if $WRITE; then
        abort "$_msg"
    elif $UPDATE; then
        abort "$_msg, please exit and retry the update"
    else
        warning 1>&2 "$_msg"
        eval "$@"
        exit $?
    fi
fi

#################################
# do stuff
################################

image=
if [[ -e "$IMAGE" ]]; then
    image=$IMAGE
else
    for p in "${CONTAINER_PATH[@]}"; do
        _image=$p/$IMAGE
        [[ -e "$_image" ]] && image=$_image && break
    done
fi
if [ -n "$image" ]; then
    [[ $VERBOSITY -lt 2 ]] || info 1>&2 "Using image: $image"
else
    abort "Failed to find omics container image: $IMAGE"
fi

if $UPDATE; then
    image_name=$(basename -s .img "$image")
    sandbox=/var/local/containers/$image_name.sandbox
    [[ -d "$sandbox" ]] || abort "Sandbox does not exists: $sandbox"
    local_temp_image=/tmp/${image_name}.new
    [[ -e "$local_temp_image" ]] && rm -- "$local_temp_image"
    info "Checking sandbox..."
    singularity check "$sandbox"
    info "Building local temp image at $local_temp_image ..."
    fakeroot singularity build "$local_temp_image" "$sandbox"
    info "Build done, moving to destination..."
    new_image=${image}.new
    mv -v -- "$local_temp_image" "$new_image"
    info "Renaming new image, keeping backup..."
    mv -v --backup=numbered "$new_image" "$image"
    info "New image at $image"
    info "Saved backup images:"
    ls -l "$image".~*~
    exit
fi

for i in "${MOUNT_POINTS[@]}"; do
    # assume no colon in pathname
    if [[ -d "${i%%:*}" ]]; then
        SINGULARITY_ARGS+=(-B "$i")
        [[ $VERBOSITY -lt 2 ]] || info 1>&2 "Mounting: $i"
    fi
done

if $KEEP_ENV; then
    if command -v module &>/dev/null; then
        if $KEEP_ENV_MODULES; then
            # container replaces omics module
            module unload omics || true
        else
            module purge || true
        fi
    fi
else
    SINGULARITY_ARGS+=(--cleanenv)
fi

# In any case, keep PBS variables
pbs_vars=()
mapfile -t pbs_vars < <(env | { grep ^PBS || [[ $? = 1 ]]; })
if [[ ${#pbs_vars[@]} -gt 0 ]]; then
    for i in "${pbs_vars[@]}"; do
        export "SINGULARITYENV_$i"
    done
fi

# set DISPLAY if needed
[[ -v DISPLAY ]] && export SINGULARITYENV_DISPLAY=$DISPLAY

cmd=()
if $WRITE; then
    SINGULARITY_ARGS+=(--writable)
    cmd+=(sudo)
fi
cmd+=(singularity)
[[ $VERBOSITY == 0 ]] && cmd+=(--quiet)
for i in $(seq 3 "$VERBOSITY"); do cmd+=(--verbose); done
cmd+=(exec "${SINGULARITY_ARGS[@]}" "$image")
if [ "$#" -gt 0 ]; then
    cmd+=("$@")
else
    cmd+=(/bin/bash)
    [[ -n "$RCFILE" ]] && cmd+=(--rcfile "$RCFILE")
    # NOTE: --norc overrules --rcfile in bash when both are given
    $NORC && cmd+=(--norc)
fi

[[ $VERBOSITY -lt 2 ]] || info >&2 "Singularity command: ${cmd[*]}"
exec "${cmd[@]}"
