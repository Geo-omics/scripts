#!/bin/bash

# Copyright 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.


# comics is a convenience wrapper to execute commands inside certain
# singularity containers in the Geomicrobiology group's and Flux computing
# environments at the University of Michigan as well as to manage said
# singularity containers.  It may be of little use outside these environments.

set -eEu

# Default name of image file without suffix
DEFAULT_IMAGE_NAME=omics
# Image file search paths
CONTAINER_PATH=(
/dept/geology/geomicro/data9/flux
/geomicro/data9/flux
)
SANDBOX_PATH=(
/var/local/containers
)

# shellcheck disable=SC2034
{
USAGE="[OPTIONS...] [--] [COMMAND...]"
HELP="Get a bash shell or run command inside omics container"
ARG_HELP="
Options given to this script should be separated from the COMMAND
by a double dash, otherwise the COMMAND may be interpreted as
options with unintended consequences likely.

    COMMAND     Command line to execute inside the container environment.  If
                this is empty then a bash prompt will be provided.

    -B PATH, --bind PATH
                Mount path inside container.  On FLUX and the geomirco servers
                common storage will be available.
    -i <IMAGE>, --container-image <IMAGE>
                Specify the container image to use.  This can be the full file
                name or base name (without suffix) or the full path to the
                singularity container image.  If a full filename is given and
                it is not a file in the current directory or a base name is
                given then the program will search for the container image in
                these locations in this order:
                ${CONTAINER_PATH[*]}
                If only a base name is given, then the container image must
                have the suffix .img or .sandbox.
                By default the $DEFAULT_IMAGE_NAME container is used.                

    -k, --keep-env
                Keep environment (not really recommended,
                but purge any loaded environment modules)
    -l, --list  List container images available at standard search paths.  The
                displayed names can be used with the -i option. Use with -v to
                display full path and timestamps.  Other options have no effect
                when used together with --list.
    -m, --keep-env-modules
                Keep environment including environment modules loaded
                (not recommended, this causes host-container interactions)
    --norc      Do not use the omics container's default initialization file
                when starting bash (if no command is given). This is also
                singularity's default behaviour.
    --old-start start the container the old way (for older copies of the container)
    -p, --keep-prompt
                Do not prepend (name) to the bash prompt if started without COMMAND
    --rcfile <file>
                Provide a file to initialize the bash shell.  This option will
                be passed to the bash shell if no command is given and the
                shell is invoked.
    -s <option>, --singularity-opt <option>
                Options passed on to singularity.  For instance,
                to additionally mount a path /some/path, add
                --singularity \"-B /some/path\" and the option
                -B /some-path will be appended to the call
                to 'singularity exec'.  The empty space between the
                option and its parameter must be protected by quotes
                to prevent premature word splitting by the shell.
    -u, --update
                Update the container specified by -i with its sandbox version
                located at /var/local/container/NAME.sandbox where NAME is the
                basename of the container image
    -w, --write Make container writable, requires sudo rights
                and a writable container image.

"
# SHORT_OPTIONS: start with + for posix correct scanning mode
# comics has no non-option arguments so, this way no -- is required before the
# command to stop getopt from rearranging any command arguments
SHORT_OPTIONS=+B:i:klmps:uw
LONG_OPTIONS=bind:container-image:keep-env,keep-env-modules,keep-prompt,list,norc,old-start,rcfile:,singularity-opt:,update,write
}

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
            (-B|--bind) MOUNT_POINTS+=("$2"); return 2;;
	    (-i|--container-image)
                IMAGE=$2
                USER_SPECIFIED_IMAGE=true
		return 2;;
            (-k|--keep-env) KEEP_ENV=true; return 1;;
            (-l|--list) LIST=true; return 1;;
            (-m|--keep-env-modules)
                KEEP_ENV=true;
                KEEP_ENV_MODULES=true;
                return 1;;
            (--old-start) OLD_START_UP=true; return 1;;
            (--norc) NORC=true; return 1;;
            (-p|--keep-prompt) KEEP_PROMPT=true; return 1;;
            (--rcfile) RCFILE=$2; return 2;;
	    (-s|--singularity)
                SINGULARITY_ARGS+=("$2")
		return 2;;
            (-w|--write)
                WRITE=true
                return 1;;
            (-u|--update)
                UPDATE=true
                return 1;;
        esac
    else
        return 0
    fi
}

if [[ -d /dept/geology/geomicro ]]; then
    geomicro_base=/dept/geology
else
    geomicro_base=
fi

##########################
# default variable values
##########################

# default will be generated below if needed
IMAGE=$DEFAULT_IMAGE_NAME
# use clean environment by default to reduce interactions betwen host and container
KEEP_ENV=false
KEEP_ENV_MODULES=false
# change prompt by default
KEEP_PROMPT=false
LIST=false
# useful mounts for flux and geomicro servers, will only be used if they exist
# NOTE: assuming on flux /scratch and /nfs are mounted via /etc/../singularity.conf
#       including it here may produce two warnings each time comics is called
MOUNT_POINTS=(
/dept
"${geomicro_base}"/geomicro/data9/flux/reference-data:ro
"${geomicro_base}"/geomicro/data9/flux/reference-data:/reference-data:ro
)
NORC=false
OLD_START_UP=false
# by default run bash without --rcfile unless we do the old start style
RCFILE=
OLD_START_RCFILE=/.singularity.d/specs/bashrc
SINGULARITY_ARGS=()
#
UPDATE=false
# Image is considered not user-specified, i.e. using default unless -i option given
USER_SPECIFIED_IMAGE=false
# read-only by default
WRITE=false

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo 1>&2 "Failed to source script library"; exit 1)

###############
# sanity check
###############

if [[ -n "${SINGULARITY_CONTAINER:-}" ]]; then
    _msg="Singularity container already running"
    if $LIST; then
        :  # pass
    elif $WRITE; then
        abort "$_msg"
    elif $UPDATE; then
        abort "$_msg, please exit and retry the update"
    else
        warning 1>&2 "$_msg"
        eval "$@"
        exit $?
    fi
fi

#################################
# do stuff
################################

if $LIST; then
    for p in "${CONTAINER_PATH[@]}"; do
        if ! [[ -d "$p" ]]; then
            if [[ $VERBOSITY -lt 2 ]]; then
                :
            elif [[ $VERBOSITY == 2 ]]; then
                :
            elif [[ $VERBOSITY -gt 2 ]]; then
                echo "Directory does not exist: $p"
            fi
            continue
        fi
        find "$p" -maxdepth 1 -type f | xargs -r file | { grep "run-singularity script executable" || true; } | cut -d: -f1 | \
            if [[ $VERBOSITY -lt 2 ]]; then
                xargs -r ls -1rt | xargs -r basename -a
            elif [[ $VERBOSITY == 2 ]]; then
                xargs -r ls -lrth
            elif [[ $VERBOSITY -gt 2 ]]; then
                xargs -r ls -1rth
            fi
        find "$p" -maxdepth 1 -type d | while read; do
            if [[ -d "$REPLY"/.singularity.d ]]; then
                if [[ $VERBOSITY -lt 2 ]]; then
                    basename "$REPLY"
                elif [[ $VERBOSITY == 2 ]]; then
                    echo "$REPLY"
                elif [[ $VERBOSITY -gt 2 ]]; then
                    echo "$REPLY"
                fi
            fi
        done
    done
    exit
fi

image=
if $USER_SPECIFIED_IMAGE && [[ -e "$IMAGE" ]]; then
    # user-specified image exist in $(pwd) or full path exists
    image=$IMAGE
else
    if $WRITE; then
        searchpaths=("${SANDBOX_PATH[@]}")
    else
        searchpaths=("${CONTAINER_PATH[@]}" "${SANDBOX_PATH[@]}")
    fi

    for p in "${searchpaths[@]}"; do
        for suf in "" .img .sandbox; do
            # only *.sandbox should be writable
            $WRITE && [[ $suf == .img ]] && continue
            _image=${p}/${IMAGE}${suf}
            [[ -e "$_image" ]] && image=$_image && break 2
        done
    done
fi
if [ -n "$image" ]; then
    [[ $VERBOSITY -lt 2 ]] || info 1>&2 "Using image: $image"
else
    if $WRITE; then
        abort "Failed to find container sandbox: $IMAGE"
    else
        abort "Failed to find container image: $IMAGE"
    fi
fi

if $UPDATE; then
    image_name=$(basename -s .img "$image")
    sandbox=/var/local/containers/$image_name.sandbox
    [[ -d "$sandbox" ]] || abort "Sandbox does not exists: $sandbox"
    local_temp_image=/tmp/${image_name}.new
    [[ -e "$local_temp_image" ]] && rm -- "$local_temp_image"
    info "Checking sandbox..."
    singularity check "$sandbox"
    info "Building local temp image at $local_temp_image ..."
    fakeroot singularity build "$local_temp_image" "$sandbox"
    info "Build done, moving to destination..."
    new_image=${image}.new
    mv -v -- "$local_temp_image" "$new_image"
    info "Renaming new image, keeping backup..."
    mv -v --backup=numbered "$new_image" "$image"
    info "New image at $image"
    info "Saved backup images:"
    ls -l "$image".~*~
    exit
fi

for i in "${MOUNT_POINTS[@]}"; do
    # assume no colon in pathname
    if [[ -d "${i%%:*}" ]]; then
        SINGULARITY_ARGS+=(-B "$i")
        [[ $VERBOSITY -lt 2 ]] || info 1>&2 "Mounting: $i"
    fi
done

if $KEEP_ENV; then
    if command -v module &>/dev/null; then
        if $KEEP_ENV_MODULES; then
            # container replaces omics module
            module unload omics || true
        else
            module purge || true
        fi
    fi
else
    SINGULARITY_ARGS+=(--cleanenv)
fi

# In any case, keep PBS and OMICS variables
keep_vars=()
mapfile -t keep_vars < <(env | { grep -P '(^PBS_|^OMICS_)' || [[ $? = 1 ]]; })
if [[ ${#keep_vars[@]} -gt 0 ]]; then
    for i in "${keep_vars[@]}"; do
        export "SINGULARITYENV_$i"
    done
fi

# on Flux, try to get requested memory
# take ~90%, kb units, intended to be used for java -XmxNNNk
if [[ -v PBS_JOBID ]]; then
    pbs_req_mem=$(qstat -f "${PBS_JOBID}" | grep "req_information.memory.0" | sed 's/.* = //')
    if [[ $pbs_req_mem =~ ^[0-9]+kb$ ]]; then
        info "Detected requested memory for PBS job: $pbs_req_mem"
        pbs_req_mem=${pbs_req_mem%kb}
        pbs_req_mem=$(echo "scale=0; $pbs_req_mem / 1.1" | bc)
        export SINGULARITYENV_OMICS_PBS_REQ_MEM=${pbs_req_mem}k
    else
        warning "Failed to detect requested memory for pbs job"
        debug "parsed from qstat output: \"$pbs_req_mem\""
    fi
fi

# set DISPLAY if needed
[[ -v DISPLAY ]] && export SINGULARITYENV_DISPLAY=$DISPLAY

# memorize $PWD -- allows container runscript to issue a warning
# if $PWD is not accessible
export SINGULARITYENV_COMICS_PWD=$PWD

cmd=()
if $WRITE; then
    SINGULARITY_ARGS+=(--writable)
    cmd+=(sudo)
fi
cmd+=(singularity)
[[ $VERBOSITY == 0 ]] && cmd+=(--quiet)
for i in $(seq 3 "$VERBOSITY"); do cmd+=(--verbose); done
if $OLD_START_UP; then
    cmd+=(exec "${SINGULARITY_ARGS[@]}" "$image")
else
    cmd+=(run "${SINGULARITY_ARGS[@]}" "$image")
fi
if [ "$#" -gt 0 ]; then
    cmd+=("$@")
else
    if $OLD_START_UP; then
        cmd+=(/bin/bash)
        if [[ -n "$RCFILE" ]]; then
            cmd+=(--rcfile "$RCFILE")
        else
            cmd+=(--rcfile "$OLD_START_RCFILE")
        fi
    else
        # option parsing in container runscript is primitive: order of options is fixed
        $KEEP_PROMPT && cmd+=(--no-change-prompt)
        [[ -n "$RCFILE" ]] && cmd+=(--rcfile "$RCFILE")
    fi
    # NOTE: --norc overrules --rcfile in bash when both are given
    $NORC && cmd+=(--norc)
fi

[[ $VERBOSITY -lt 2 ]] || info >&2 "Singularity command: ${cmd[*]}"
exec "${cmd[@]}"
