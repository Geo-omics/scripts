#!/bin/bash
#
# Copyright (c) 2018 Regents of The University of Michigan.
# All Rights Reserved.
#
# Author: Robert <heinro@med.umich.edu>
#

set -eEu

# Default name of image file
DEFAULT_IMAGE_NAME=omics.img
# Image file search paths
CONTAINER_PATH=(
${PWD}
/dept/geology/geomicro/data9/flux
/geomicro/data9/flux
/var/local/containers
)

# shellcheck disable=SC2034
{
USAGE="[OPTIONS...] [--] [COMMAND...]"
HELP="Get a shell or run command inside omics container"
ARG_HELP="
Options given to this script should be separated from the COMMAND
by a double dash, otherwise the COMMAND may be interpreted as
options with unintended consequences likely.

    COMMAND     Command line to execute inside the container environment.  If
                this is empty then a bash prompt will be provided.

    -B PATH, --bind PATH
                Mount path inside container.  On FLUX and the geomirco servers
                common storage will be available.
    -i <PATH>, --container-image <PATH>
                Full path to singularity container image.  By default
                image is $DEFAULT_IMAGE_NAME, search path is
                ${CONTAINER_PATH[*]}

    -k, --keep-env
                Keep environment (not really recommended,
                but purge any loaded environment modules)
    -m, --keep-env-modules
                Keep environment including environment modules loaded
                (not recommended, this causes host-container interactions)
    -s <option>, --singularity-opt <option>
                Options passed on to singularity.  For instance,
                to additionally mount a path /some/path, add
                --singularity \"-B /some/path\" and the option
                -B /some-path will be appended to the call
                to 'singularity run'.  The empty space between the
                option and its parameter must be protected by quotes
                to prevent premature word splitting by the shell.
    -w, --write Make container writable, requires sudo rights
                and a writable container image.

"
SHORT_OPTIONS=B:i:kms:w
LONG_OPTIONS=bind:container-image:keep-env,kee-env-modules,singularity-opt:,write
}

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
            (-B|--bind) MOUNT_POINTS+=("$2"); return 2;;
	    (-i|--container-image)
		IMAGE=$2
		return 2;;
            (-k|--keep-env) KEEP_ENV=true; return 1;;
            (-m|--keep-env-modules)
                KEEP_ENV=true;
                KEEP_ENV_MODULES=true;
                return 1;;
	    (-s|--singularity)
                SINGULARITY_ARGS+=($2)
		return 2;;
            (-w|--write)
                WRITE=true
                return 1;;
        esac
    else
        return 0
    fi
}

##########################
# default variable values
##########################

# default will be generated below if needed
IMAGE=$DEFAULT_IMAGE_NAME
# use clean environment by default to reduce interactions betwen host and container
KEEP_ENV=false
KEEP_ENV_MODULES=false
# useful mounts for flux and geomicro servers, will only be used if they exist
MOUNT_POINTS=(
/scratch
/nfs
/dept
/dept/geology/geomicro/data9/flux/reference-data/omics-reference-data:ro
/omics
/geomicro
)
SINGULARITY_ARGS=()
# read-only by default
WRITE=false

# shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
POSIXLY_CORRECT=1 . "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo 1>&2 "Failed to source script library"; exit 1)

###############
# sanity check
###############

if [[ -n "${SINGULARITY_CONTAINER:-}" ]]; then
    _msg="Singularity container already running"
    if $WRITE; then
        $WRITE && abort "$_msg"
    else
        warning 1>&2 "$_msg"
        eval "$@"
        exit $?
    fi
fi

#################################
# do stuff
################################

image=
if [[ -e "$IMAGE" ]]; then
    image=$IMAGE
else
    for p in "${CONTAINER_PATH[@]}"; do
        _image=$p/$IMAGE
        [[ -e "$_image" ]] && image=$_image && break
    done
fi
if [ -n "$image" ]; then
    [[ $VERBOSITY -lt 2 ]] || info 1>&2 "Using image: $image"
else
    abort "Failed to find omics container image: $IMAGE"
fi

for i in "${MOUNT_POINTS[@]}"; do
    if [ -d "${i%:ro}" ]; then
        SINGULARITY_ARGS+=(-B "$i")
        [[ $VERBOSITY -lt 2 ]] || info 1>&2 "Mounting: $i"
    fi
done

if $KEEP_ENV; then
    if which module &>/dev/null; then
        if $KEEP_ENV_MODULES; then
            # container replaces omics module
            module unload omics || true
        else
            module purge || true
        fi
    fi
else
    SINGULARITY_ARGS+=(--cleanenv)
fi

if [ "$#" -gt 0 ]; then
    if $WRITE; then
        exec sudo singularity run "${SINGULARITY_ARGS[@]}" -w "$image" "$@"
    else
        exec singularity run "${SINGULARITY_ARGS[@]}" "$image" "$@"
    fi
else
    if $WRITE; then
        exec sudo singularity shell -w "${SINGULARITY_ARGS[@]}" "$image"
    else
        exec singularity shell "${SINGULARITY_ARGS[@]}" "$image"
    fi
fi
