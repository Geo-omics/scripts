#!/usr/bin/env python3

# Copyright 2020 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.
"""
Update fasta and map files with existing ASV accessions

Takes a reference fasta file of known ASV sequences, and from a Mothur run a
sequence id->OTU map and fasta file and replaces the OTUs in the map with ASVs.
The output is a two-column table, mapping mothur OTUs to ASVs from the
reference.

All fasta input must be 1-line per sequence.

This script is part of the Schmidt Lab 16S mothur pipeline.
"""
import argparse
import sys

argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument(
    'asv_fa',
    metavar='asv-fasta',
    type=argparse.FileType(),
    help='Fasta file sequences with ASV accessions',
)
argp.add_argument(
    'map',
    metavar='seq-otu-map',
    type=argparse.FileType(),
    help='Mothur Sequence ID to OTU mapping, a two-column table, '
         'usually with suffix asv0.precluster.denovo.uchime.pick.map',
)
argp.add_argument(
    'fasta',
    type=argparse.FileType(),
    help='Mothur fasta file.  Fasta headers should contain sequence IDs.',
)
argp.add_argument(
    '-o', '--output',
    default=sys.stdout,
    type=argparse.FileType('w'),
    help='A two-column output mapping OTUs to ASVs, this file can then '
         'be used with the --map option for the shared-set-accessions script',
)
argp.add_argument('--version', action='version', version='%(prog)s '
                  'is part of geo-omics-scripts VERSION_PLACEHOLDER')
args = argp.parse_args()


# Load ASV fasta
asvs = {}
for line in args.asv_fa:
    line = line.strip()
    if line.startswith('>'):
        cur = line.lstrip('>').split()[0]  # take "first word" as asv
        continue
    else:
        asvs[line] = cur
        del cur

# Load mothur fasta
seqs = {}
for line in args.fasta:
    line = line.strip()
    if line.startswith('>'):
        cur = line.lstrip('>').split()[0]  # take "first word" as id
        continue
    else:
        seqs[cur] = line.replace('-', '').strip('.')  # rm alignment
        del cur

otu2asv = {}
for line in args.map:
    seqid, otu = line.strip().split('\t')
    try:
        otu2asv[otu] = asvs[seqs[seqid]]
    except KeyError:
        continue

for otu, asv in sorted(otu2asv.items(), key=lambda x: x[0]):
    args.output.write(f'{otu}\t{asv}\n')

args.output.close()
