#!/usr/bin/env python3

# Copyright 2020 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.

"""
Conditionally select samples and OTUs from shared file based on meta data
"""
import argparse
from pathlib import Path
import sys

import pandas

from omics.shared import MothurShared


def info(*args, **kwargs):
    print(*args, file=sys.stdout, **kwargs)


argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument(
    'query',
    nargs='+',
    help='One or more query specifications of the form <column>[!]=<field>',
)
argp.add_argument(
    'shared_file',
    type=argparse.FileType(),
    help='Mothur shared file',
)
argp.add_argument(
    '-m', '--meta-data',
    required=True,
    type=argparse.FileType(),
    help='Tab-separated table with meta data with header row with column '
         'names, and one row per sample, first column must be sample names',
)
argp.add_argument(
    '-o', '--output',
    help='Name of output file.  If not given, a filename will be generated',
)
argp.add_argument('--version', action='version', version='%(prog)s '
                  'is part of geo-omics-scripts VERSION_PLACEHOLDER')
args = argp.parse_args()

if args.output is None:
    outfile = Path(Path(args.shared_file.name).name)
    outfile = outfile.with_suffix('.pick.shared')
else:
    outfile = args.output

meta = pandas.read_table(args.meta_data, index_col=0, dtype=str,
                         keep_default_na=False)

info('Loaded meta data for {} samples'.format(len(meta.index)))

# parse query specs
query = []
anti_query = []
for i in args.query:
    try:
        key, val = i.split('!=')
    except ValueError:
        try:
            key, val = i.split('=')
        except ValueError:
            argp.error('Failed to parse selection query : {}'.format(i))
        else:
            query.append((key, val))
    else:
        anti_query.append((key, val))

    if key not in meta.columns:
        argp.error('query key {} is not a column in the meta data table'
                   ''.format(key))

# compute selection
for key, val in query:
    meta = meta[meta[key] == val]

for key, val in anti_query:
    meta = meta[meta[key] != val]

info('Samples matching query:', len(meta.index))

info('Loading shared file...')
sh = MothurShared(args.shared_file)
samples = [str(i).replace('-', '_') for i in meta.index]
samples = [i for i in samples if i in sh.samples]
info('Matching samples present in shared file:', len(samples))
info('Selecting subset...')
sh.pick_samples(samples)
info('Writing output... ', end='', flush=True)
sh.save(outfile)
info('saved as:', outfile)
