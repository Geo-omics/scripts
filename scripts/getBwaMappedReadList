#! /usr/bin/perl

# Copyright 2013, 2015, 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.


=head1 NAME

getBwaMappedReadList - tell which reads are mapped onto those contigs


=head1 DESCRIPTION

getMappedReadList: give me a sorted bam(-b) file and a list of contigs(-l) and I'll tell you which reads mapped(-o) onto those list of contigs.

=head2 NOTE: For Single Contig

If you just have one contig, use the following command instead:
samtools view -F0x4 sortedBamFile contigName | cut -f 1 >> outputFile.list
Some other commands to try:
# of unmapped reads:
samtools view -f0x4 -c sortedBamFile contigName
# of uniquely mapped reads:
samtools view -F0x4 -c -q 1 sortedBamFile contigName
where, -c = Instead of printing the alignments, only count them and print the total number


=head1 OPTIONS

=over 8

=item B<-b>

or bam:	sorted bam file;

=item B<-l>

or list:	list of contig used for the mapping.

=item B<-o>

or out:	output list

=back


=head1 PREPARATION

 [1] Make sure your sequence headers don't have any funny characters like: (,);:
 [2] Make sure you have an indexed sorted bam file in the same folder; and
 [3] The samtools module is loaded.


=head1 Questions/Comments/Feedback/Beer

April 2012, Sunit Jain (sunitj [AT] umich [DOT] edu)


=head1 SEE ALSO

L<omics(1)>, L<illumina-reads-processing(7)>

=head2 Other local resources

=over

=item [1]

L<HTML documentation|file:///usr/share/doc/geo-omics-scripts/html/index.html>

=item [2]

L<Omics workflow documentation [PDF]|file:///usr/share/doc/geo-omics-scripts/Geomicro-Illumina-Reads-Processing-Pipeline.pdf>

=back

=head2 Web

=over

=item [3]

L<Workflow documentation [PDF]|https://drive.google.com/open?id=0BxFSivK8RfJed05wamtrbEVUeE0>

=item [4]

L<Website|http://www.earth.lsa.umich.edu/geomicrobiology/>

=item [5]

L<Github repository|https://github.com/Geo-omics/scripts>

=back

=cut

use strict;
use Getopt::Long;

my $bam;
my $list;
my $out=$$.".list";
my $verbose;

GetOptions(
	"b|bam:s"=>\$bam,
	"l|list:s"=>\$list,
	"o|out:s"=>\$out,
	"verbose"=>\$verbose,
	"h|help"=>sub{system('perldoc', $0); exit;},
);

if (! $bam || ! $list){ print $_." Not Found!!";}

my @contigsList;
open (LIST, $list)|| die "[ERROR: $0]: $!\n";
while(my $line=<LIST>){
	next if $line=~ /^\W/;
	chomp ($line);
	$line=~ s/\r//;

	next unless $line;
	my($contig, @etc)=split(/\s+/, $line);

	$contig=~ s/(\W)/\\$1/g;
	push(@contigsList, $contig);
}
close LIST;


my $i=0;
my $tmp=$$.".tmp";
print "Aggregating a list of mapped reads..\n";
foreach my $c(@contigsList){
	$i++;
	my $cmd="samtools view -F0x4 $bam $c | cut -f 1 >> $tmp";
	print "[$i]: ".$cmd."\n" unless ($verbose);
	system($cmd);
}

print "Removing duplicate entries..\n";
system("sort -u $tmp > $out");

print "Removing temporary files..\n";
unlink $tmp;

print "Done!\n";
exit;
