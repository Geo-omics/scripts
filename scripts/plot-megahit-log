#!/usr/bin/env python3
"""
Plot time spend in steps of Megahit assembly
"""
import argparse
from datetime import datetime
from matplotlib.pyplot import subplots
import numpy as np
import re


argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument('log_file', type=argparse.FileType(),
                  help='log file from megahit run')
argp.add_argument('-v', '--verbose', action='store_true', default=False,
                  help='Show diagnostig output')
args = argp.parse_args()


pats = [
    r'Extracting solid \(k\+1\)-mers for k = (?P<k_extr_s>\d+)',
    r'Extracting iterative edges from k = \d+ to (?P<k_extr_e>\d+)',
    r'Building graph for k = (?P<k_bg>\d+)',
    r'Assembling contigs from SdBG for k = (?P<k_ac>\d+)',
    r'Local assembling k = (?P<k_la>\d+)',
    r'(?P<other_txt>.*)',
]

ts_pat = r'^--- \[(?P<ts>.*)\] ({}) ---$'.format('|'.join(pats))
ts_pat = re.compile(ts_pat)

labels = {
    'k_extr_s': 'extract',
    'k_extr_e': 'extract',
    'k_bg': 'build graph',
    'k_ac': 'asm contigs',
    'k_la': 'local asm',
    'other_txt': None,
}


def get_timestamps(file, verbose=False):
    for line in file:
        line = line.strip()
        m = re.match(ts_pat, line)
        if m is None:
            if verbose:
                print('skipping:', line)
            continue

        m = m.groupdict()

        try:
            ts = datetime.strptime(m['ts'], '%a %b %d %H:%M:%S %Y')
        except Exception:
            print('Failed to parse timestamp:', line)
            raise
        yield ts, m


tss = []
timestamp_matches = list(get_timestamps(args.log_file, args.verbose))

for ts, m in timestamp_matches:
    ts_struct = None
    for i in ['k_extr_s', 'k_extr_e', 'k_bg', 'k_ac', 'k_la', 'other_txt']:
        if i in m and m[i] is not None:
            try:
                k = int(m[i])
            except ValueError:
                k = None
            if i == 'other_txt':
                lab = m['other_txt'][:30]
            else:
                lab = labels[i]
            ts_struct = (ts, lab, k)
            break
    if ts_struct is None:
        print('Parsing error:', ts, m)
    else:
        tss.append(ts_struct)

# make deltas
for i in range(len(tss)):
    t0 = tss[i][0]
    try:
        t1 = tss[i + 1][0]
    except IndexError:
        t1 = t0
    tss[i] = (t1 - t0), tss[i][1], tss[i][2]

# index by k
steps = {}
for delta, step, k in tss:
    if k is None:
        continue
    if k not in steps:
        steps[k] = {'local asm': 0}
    steps[k][step] = delta.seconds

# set up plot data
ex = np.array([steps[k]['extract'] for k in sorted(steps.keys())])
bg = np.array([steps[k]['build graph'] for k in sorted(steps.keys())])
ac = np.array([steps[k]['asm contigs'] for k in sorted(steps.keys())])
la = np.array([steps[k]['local asm'] for k in sorted(steps.keys())])

xvals = np.arange(len(steps))

# draw stacked barplot
fig, ax = subplots()
ax.bar(xvals, ex, tick_label=list(sorted(steps.keys())))
ax.bar(xvals, bg, bottom=ex)
ax.bar(xvals, ac, bottom=ex + bg)
ax.bar(xvals, la, bottom=ex + bg + ac)
ax.legend(['extract', 'build graph', 'asm contigs', 'local asm'])
ax.set_ylabel('seconds')
ax.set_title('Time per assembly step and k-mere size')
fig.show(warn=True)
input('Press <enter> if done')
