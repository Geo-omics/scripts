#!/bin/bash
#
# Copyright (c) 2017 Regents of The University of Michigan.
# All Rights Reserved.
#
# Author: Robert <heinro@med.umich.edu>
#
set -eE

# shellcheck disable=SC2034
{
USAGE="[OPTIONS]... [SAMPLE_DIRS]..."
HELP="Assemble a metagenome, and analyse assembly"
ARG_HELP="
      --assembly-only     Stop after finishing the assembly
      --assembly FILE     Skip assembly step but continue down-stream analysis
			  with the provided contigs / scaffolds.
      --name NAME         User-defined identifier for assembly.  Used as the
                          final assemblies file name in the working directory.
                          The default is 'assembly'.
  -t, --threads, --cpus N
                          How many CPUs/threads to use
      --force             Overwrite existing files, default is to abort when output files exist already
      --idba-ud           Use the IDBA_UD assembler instead of the default MEGAHIT
      --normalized-reads FILE
                          Specify an existing normalized input file to be used for the assembly.
                          This will skip the normalization step and ignore any other input.
      --maxk N            min k parameter, must be odd with --megahit
      --mink N            max k parameter, must be odd with --megahit
      --step N            k steps parameter, must be even with --megahit
      --level LEVEL       Specifies the assembly level to use for downstream analysis.
                          Can be either contig (the default) or scaffold.  This is
			  ignored when using --megahit
      --megahit           Use MEGAHIT assembler, this is the default
      --out PATH          Directory to which output is saved, default is the working directory
      --phylosiftrc FILE  Specify a custom PhyloSift configuration file
      --reads FILE        Name of interleaved reads files used for input, relative to each sample directory,
                          by default this is 'int.good.fastq'
      --skip-blast        Skip classification steps, by default run blast
      --skip-normalization
                          Do not run BBNorm to normalize read depth before assembly
      --skip-phylosift    Skip PhyloSift run, by default PhyloSift is run
      --skip-quast        Skip QUAST analysis, by default QUAST is run
"
MORE_HELP="
The default k-min/max/step parameters are 52/92/8 for IDBA_UD and 21/141/12 for
MEGAHIT.  Unless your under restricted computational resources consider using
MEGAHIT with 21/255/6 or so, as each additional assembly step will take less
time than the previous step.  With 64 CPUs this should only take about a day or
two for moderately large datasets.

Note on normalization:  We use BBNorm to normalize maximum read-depth.  The
target depth is about 35ish.  To reduce computation time we recommend fast
access to where the reads are stored and many CPUs and a few hundred GB RAM.
Set environment variable TMPDIR to a fast local storage with a few 100GB of
empty space. Expect normalization of 1TB of fastq data to take about a day.
"
# shellcheck disable=SC2100
SHORT_OPTIONS=t:
LONG_OPTIONS="assembly-only,assembly:,name:,cpus:,force,idba-ud,maxk:,megahit,mink:,normalized-reads:,level:,out:,phylosiftrc:,reads:,step:,skip-blast,skip-normalization,skip-phylosift,skip-quast,threads:"
}

handle_options () {
    if [ "$#" -gt 0 ]; then
	case "$1" in
	(--assembly-only)
	    ASSEMBLY_ONLY=true
	    return 1;;
	(--assembly)
	    ASSEMBLY="$2"
	    return 2;;
	(--name)
	    USER_ASSEMBLY_NAME="$2"
	    return 2;;
	(--cpus|-t|--threads)
	    CPUS="$2"
	    return 2;;
	(--force)
	    FORCE=true
	    return 1;;
	(--idba-ud)
	    MEGAHIT=false
	    return 1;;
	(--maxk)
	    MAXK="$2"
	    return 2;;
	(--megahit)
	    MEGAHIT=true
	    return 1;;
	(--mink)
	    MINK="$2"
	    return 2;;
        (--normalized-reads)
            NORM_READS="$2"
	    RUN_BBNORM=false
            return 2;;
	(--level)
	    ASSEMBLY_LEVEL="$2"
	    return 2;;
	(--out)
	    OUTDIR="$2"
	    return 2;;
	(--phylosiftrc)
	    PHYLOSIFTRC="$2"
	    return 2;;
	(--reads)
	    READS="$2"
	    return 2;;
	(--step)
	    STEP="$2"
	    return 2;;
	(--skip-blast)
	    RUN_BLAST=false
	    return 1;;
	(--skip-normalization)
	    RUN_BBNORM=false
	    return 1;;
	(--skip-phylosift)
	    RUN_PHYLOSIFT=false
	    return 1;;
	(--skip-quast)
	    RUN_QUAST=false
	    return 1;;
        esac
    fi
}

##########################
# default variable values
##########################

# Empty default ASSEMBLY triggers running the assembler
ASSEMBLY=
#
ASSEMBLY_LEVEL=contig
# Stop after finishing assembly when set to `true`
ASSEMBLY_ONLY=false
# Name of the (link to the) finished assembly
DEFAULT_ASSEMBLY_NAME=assembly
USER_ASSEMBLY_NAME=
# Number of CPUs to use in parallel
DEFAULT_CPUS=4
# Overwrite existing files if `true`
FORCE=false
# Use megahit by default, if false, then use idba_ud
MEGAHIT=true
#
NORM_READS=
# PhyloSift run control file
PHYLOSIFTRC="$(dirname "$0")/../share/geo-omics-scripts/phylosiftrc"
# interleaved reads as made by qc script
READS=int.good.fastq
#
RUN_BBNORM=true
RUN_BLAST=true
RUN_PHYLOSIFT=true
RUN_QUAST=true

# empty by default
SAMPLE_DIRS=()

## shellcheck source=../lib/liba.sh
# shellcheck disable=SC1091
. "$(dirname "$0")/../share/geo-omics-scripts/liba.sh" || (echo "Failed to source script library"; exit 1)

# default output path is the working directory, which is only defined after sourcing liba.sh
[ ! -z "$OUTDIR" ] || OUTDIR="ASSEMBLY"

# use available cores on pbs job as needed
[[ -v CPUS ]] || CPUS=${PBS_NP:-$DEFAULT_CPUS}

# handle non-option parameters
if [ "$#" -gt 0 ]; then
    SAMPLE_DIRS=("$@")
else
    SAMPLE_DIRS=( . )
fi

# find valid ref data path
if [[ -v OMICS_REFERENCE_DATA ]]; then
    ref_data_home="$OMICS_REFERENCE_DATA"  # from environment
else
    common_ref_path=data9/flux/reference-data
    alt_ref_data=(
        /geomicro
        /gmb
        /dept/geology/geomicro/
    )

    for i in "${alt_ref_data[@]}"; do
        if [[ -d $i/$common_ref_path ]]; then
            ref_data_home=$i/$common_ref_path
            break
        fi
    done
fi
if [[ ! -v ref_data_home ]]; then
    error "Path to reference data not specified or not existing -- some step below may fail"
    ref_data_home=.
fi

# Required Databases
PATH2SILVA="$ref_data_home/SILVA/latest/SILVA_128_SSURef_tax_silva.fasta"
PATH2BACT="$ref_data_home/NCBI_RefSeq_RNA/latest/bacteria.rna.fasta"
PATH2ARCH="$ref_data_home/NCBI_RefSeq_RNA/latest/archaea.rna.fasta"

#################################
# do stuff
################################

if $MEGAHIT; then
    # default MEGAHIT Parameters
    [ -n "$MINK" ] || MINK=21
    [ -n "$MAXK" ] || MAXK=141
    [ -n "$STEP" ] || STEP=12
else
    # default IDBA Parameters
    [ -n "$MINK" ] || MINK=52
    [ -n "$MAXK" ] || MAXK=92
    [ -n "$STEP" ] || STEP=8
fi

spec=k${MINK}_${MAXK}_s${STEP}
if [[ -n "$USER_ASSEMBLY_NAME" ]]; then
    name_suffix=_$USER_ASSEMBLY_NAME
fi
out="$OUTDIR/$spec${name_suffix:-}"

assembly_name=${USER_ASSEMBLY_NAME:-$DEFAULT_ASSEMBLY_NAME}

$MEGAHIT || [ "$ASSEMBLY_LEVEL" == contig ] || [ "$ASSEMBLY_LEVEL" == scaffold ] \
    || abort "Bad value given for --level: $ASSEMBLY_LEVEL"

run_assembly=true
if [ -n "$ASSEMBLY" ]; then
    if [ -f "$ASSEMBLY" ]; then
        assembly=$ASSEMBLY
        out=${WORK_DIR}
        run_assembly=false
    else
        abort "Existing assembly not found: $ASSEMBLY"
    fi
else
    # check if reads exists before doing anything
    reads=("${SAMPLE_DIRS[@]/%//$READS}")
    for i in "${reads[@]}"; do
        [[ -d "$(dirname "$i")" ]] || error "is not a directory: $(dirname "$i")"
        [[ -r "$i" ]] || abort "interleaved reads file not found: $i"
    done

    if [[ -n "$NORM_READS" ]]; then
        [[ -e "$NORM_READS" ]] || abort "Normalized reads file not found: $NORM_READS"
        reads_arg=$NORM_READS

    elif $RUN_BBNORM; then
        reads_suffix=${READS##*.}
        if [[ "$reads_suffix" != fastq ]] && [[ "$reads_suffix" != fasta ]] && [[ "$reads_suffix" != "fa" ]]; then
            warning "Unexpected suffix of reads file is $reads_suffix, BBNorm will not work with compressed data"
        fi

        norm_reads=$OUTDIR/${READS/%.${reads_suffix}/.norm.${reads_suffix}}
        if [[ -e "$norm_reads" ]]; then
            if $FORCE; then
                info "Removing existing $norm_reads per --force option"
                rm -- "$norm_reads"
            else
                abort "Normalized reads file exists.  Use \"--normalized-reads $norm_reads\" to use this file for assembly or --force to overwrite"
            fi
        fi

        # set up temp dir use for vondamm and cayman
        TMPFAST=/tmp/fast
        if [[ -z "$TMPDIR" ]] && [[ -f $TMPFAST ]]; then
            info "Attempting to use $TMPFAST to store BBNorm temporary data"
            export TMPDIR=$TMPFAST
        fi

        bbnorm_log=$OUTDIR/bbnorm.log
        # bbnorm gets comma-separated input files as in= arg
        bbnorm_args=(
            in="$(IFS=,; echo "${reads[*]}")"
            out=$norm_reads
            threads=$CPUS
            target=30
        )
        /usr/bin/time -v bbnorm "${bbnorm_args[@]}" |& tee "$bbnorm_log"
        reads_arg=$norm_reads
    else

        # assemble not normalized reads
        if $MEGAHIT; then
            # make comma-separated list
            reads_arg=
            for i in "${reads[@]}"; do
                [[ -n "$reads_arg" ]] && reads_arg+=,
                suffix=${i##*.}
                if [[ "$suffix" == gz ]]; then
                    reads_arg+="<(gunzip -c $i)"
                elif [[ "$suffix" == zst ]]; then
                    reads_arg+="<(unzstd -c $i)"
                elif [[ "$suffix" == zip ]]; then
                    reads_arg+="<(unzip -p $i)"
                else
                    # assume plain
                    reads_arg+="$i"
                fi
            done
        else
            # idba requires a single read file
            info "Setting up piping of reads into IDBA_UD..."
            reads_arg=$(mktemp -u)
            mkfifo --mode=600 "$reads_arg"
            cat "${reads[@]}" > "$reads_arg" &
        fi
    fi

    if [[ ${#reads[@]} -eq 1 ]]; then
        # descend into single sample directory or working directory, output goes here, too
        cd -- "$(dirname "${reads[0]}")"
    fi

    if [ -d "$out" ]; then
	# partial output from previous run?
	if $FORCE; then
	    info "Erasing $out per --force option..."
	    $RM -rf -- "$out"
	else
	    abort "Output directory $out exists, use --force to override this check or --out to specify a different output directory."
	fi
    fi

    if $MEGAHIT; then
        assembly=$out/final.contigs.fa
    else
        assembly=$out/$ASSEMBLY_LEVEL.fa
    fi
fi

if $run_assembly; then
    info "Assembling..."
    if $MEGAHIT; then
        $MKDIR -p "$(dirname "$out")"  # megahit mkdirS the last path component itself
        # eval needed for proc'subst'ing input reads
        eval megahit -o "$out" --12 "$reads_arg" -t "$CPUS" --k-min "$MINK" --k-max "$MAXK" --k-step "$STEP"
    else
        $MKDIR -p "$out"
        echo idba_ud -o "$out" -r "$reads_arg" --num_threads "$CPUS" --mink "$MINK" --maxk "$MAXK" --step "$STEP"
        idba_ud -o "$out" -r "$reads_arg" --num_threads "$CPUS" --mink "$MINK" --maxk "$MAXK" --step "$STEP"
        rm -rf -- "$reads_arg"  # remove named pipe
    fi
    # make convenience (hard) link
    $LN -f "$assembly" "$assembly_name".fa
    info "done: Final assembly at $assembly_name, intermediate steps under $assembly"
fi

! $ASSEMBLY_ONLY || exit 0

if $RUN_QUAST; then
    info "Making assembly stats..."
    if $run_assembly && ! $MEGAHIT; then
        quast_opts=(-l "Scaffolds, Contigs" "$out/scaffold.fa" "$out/contig.fa")
    else
        quast_opts=(-l "Assembly" "$assembly")
    fi
    quast_out="$out/QUAST_RESULTS"
    metaquast.py \
        --rna-finding \
        --conserved-genes-finding \
        --gene-finding \
        --threads "$CPUS" \
        "${quast_opts[@]}" \
        --output-dir "$quast_out"
    info "done: Quast results at $quast_out"
fi

if $RUN_BLAST; then
    info "Searching for scaffolds with 16S..."
    blast_out="$out/BLASTN"
    $MKDIR -p "$blast_out"
    T1BLAST=$blast_out/sample_vs_silvaSSU.topHits.blastn
    BBLAST=$blast_out/sample_subSeq_vs_bactNCBI.blastn
    ABLAST=$blast_out/sample_subSeq_vs_archaeaNCBI.blastn
    SSEQ=$blast_out/silvaSSU.topHits.fasta

    blastn -query "$assembly" -db "$PATH2SILVA" -outfmt "7 std qlen stitle" -out "$blast_out/sample_vs_silva.blastn" -num_threads "$CPUS"
    top5 -t 1 -b "$blast_out/sample_vs_silva.blastn" -o "$T1BLAST"
    if [ ! -s "$blast_out/sample_vs_silvaSSU.blastn" ]; then
        info "Looking up top hits from 16S search for complete genomes in NCBI..."
        extractSubSeq -query -blast "$T1BLAST" -f "$assembly" -o "$SSEQ"
        blastn -query "$SSEQ" -db $PATH2BACT -outfmt "7 std qlen qcovs stitle" -out "$BBLAST" -num_threads "$CPUS"
        blastn -query "$SSEQ" -db $PATH2ARCH -outfmt "7 std qlen qcovs stitle" -out "$ABLAST" -num_threads "$CPUS"
        top5 -t 1 -b "$BBLAST" -o "${BBLAST/%blastn/top_hits.blastn}"
        top5 -t 1 -b "$ABLAST" -o "${ABLAST/%blastn/top_hits.blastn}"
    fi
    info "done: classification results at $blast_out"
fi

$RUN_PHYLOSIFT && RUN_PHYLOSIFT=false && info "Skipping analysis with Phylosift [currently not supported]"
if $RUN_PHYLOSIFT; then
    if [ -f "$PHYLOSIFTRC" ]; then
        info "Will use $PHYLOSIFTRC as config file for PhyloSift"
    else
        abort "Missing Phylosift configuration file, file not found: $PHYLOSIFTRC -- use --phylosiftrc to specify an alternative configuration that tells Phylosift where to find its reference data"
    fi
    psout="$out/PS"
    if [ -d "$psout" ]; then
        info "Erasing previous PhyloSift results..."
        $RM -r -- "$psout"
    fi
    info "Running PhyloSift..."
    phylosift all --disable_updates --output="$psout" --threads="$CPUS" --config="$PHYLOSIFTRC" "$assembly"
    info "done: PhyloSift results at $psout"
fi

debug "[assemble script done]"
# gmb: input: good_int.fasta
# gmb: output: scaffold.fa
# gmb: args: --cpus {{ cpus }} --no-color
# gmb: cpus_min: 1
# gmb: cpus_max: CPUS
