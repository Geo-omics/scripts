#!/usr/bin/perl -w

# Copyright 2013, 2014, 2015, 2019 Regents of The University of Michigan.

# This file is part of geo-omics-scripts.

# Geo-omics-scripts is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# Geo-omics-scripts is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with Geo-omics-scripts.  If not, see <https://www.gnu.org/licenses/>.


=head1 NAME

derep_ClusterMap - Map representative reads back to original replicated read set

=head1 SYNOPSIS

B<derepClustMap> B<-clust> I<.clust file> B<-l> I<log file> B<-m> I<original mapped file>


=head1 MOTIVATION

In a dereplicated file genererated by my 'dereplicate' script, each sequences
may be a representative of a cluster of sequences.  If you've used the
dereplicated file for your Blasts, you may wish to find out the actual number
of sequences that 'would have' gotten the same result had the file not been
dereplicated. By using this script you can get to that number by simply
multiplying this result to your blast output.

Why use a dereplicated file at all, you say?  One of the many reasons is that
it cuts down on the blast times by a HUGE margin!  For more on dereplication
and its affects, goto: ???


=head1 OPTIONS

=over

=item B<-o> I<file>

Output File Name

=back


=head1 AUTHOR

 Sunit Jain, November, 2011
 sunitj [AT] umich [DOT] edu


=head1 SEE ALSO

L<omics(1)>, L<illumina-reads-processing(7)>

=head2 Other local resources

=over

=item [1]

L<HTML documentation|file:///usr/share/doc/geo-omics-scripts/html/index.html>

=item [2]

L<Omics workflow documentation [PDF]|file:///usr/share/doc/geo-omics-scripts/Geomicro-Illumina-Reads-Processing-Pipeline.pdf>

=back

=head2 Web

=over

=item [3]

L<Workflow documentation [PDF]|https://drive.google.com/open?id=0BxFSivK8RfJed05wamtrbEVUeE0>

=item [4]

L<Website|http://www.earth.lsa.umich.edu/geomicrobiology/>

=item [5]

L<Github repository|https://github.com/Geo-omics/scripts>

=back

=cut


use strict;
use Getopt::Long;

my $log;
my $mapped;
my $clustF;
my $out=$$.".derep.map";
my $version= "derep_ClusterMap v 0.1.9";
GetOptions(
	'l|log=s'=>\$log,
	'm|mapped=s'=>\$mapped,
	'clust=s'=>\$clustF,
	'o|out:s'=>\$out,
	'h'=>sub{system('perldoc', $0); exit;},
	'v|version'=>sub{print "# $version\n"; exit;}
);
print "# $version\n";

my @clustFiles=split(/\,/, $clustF);

open (LOG, $log) || die "[ERROR] $log:$!\n";
my (%index, %map);
while(my $line=<LOG>){
	next if ($line=~ /^#/);
	chomp($line);
	$line=~ s/\r//;
	next unless $line;

	my($query, @hits)=split(/\t/, $line);
	foreach my $h(@hits){
		$index{$h}++;
		push (@{$map{$query}},$h);
	}
}
close LOG;

my $numNames=scalar(keys %index);
print "[".$0."] Looking for [ ".$numNames." ] items.\n";


my $totalSeqs=0;
my %multiplier;
my $expandedNumSeqs=0;
foreach my $clust(@clustFiles){
	open (CLUST, $clust) || die "[ERROR] $clust:$!\n";
	print "Parsing: $clust\n";
	while(my $line=<CLUST>){
		next if ($line=~ /^#/);
		chomp($line);
		$line=~ s/\r//;
		next unless $line;

		my($cNum, $size, $rep, @seqNames)=split(/\t/, $line);
		my ($name, $strand)=split(/\s/, $rep);
		$name=~ s/^@//;
		if ($index{$name}){
			$multiplier{$name}=$size;
			$expandedNumSeqs+=$size;
			delete $index{$name};
		}
		$totalSeqs+=$size;
	}
	close CLUST;
}

my $notFound=scalar(keys %index);

print "# [".$0."] ".$numNames." dereplicated sequences correspond to ".$expandedNumSeqs." real sequences.\n";
print "# [".$0."] ".$notFound." not found!\n" unless $notFound==0;

open (OUT, ">".$out) || die "$mapped : $!";
open(MAPPED, $mapped) || die "$mapped : $!";
while(my $line=<MAPPED>){
	chomp $line;
	next unless $line;


	if ($line=~ /^#/){
		if($.==4){
			print OUT $line."\t\t\tRead Counts:\t".$expandedNumSeqs."\n";
		}
		else{
			print OUT $line."\n";
		}
 		next;
	}
	
	my($query, @data)=split(/\t/, $line);
	my $newTotal=0;
	if ($map{$query}){
		foreach my $h(@{$map{$query}}){
			$newTotal+=$multiplier{$h} if ($multiplier{$h});
		}
		$data[-3]=$newTotal;
#		$data[-1]=($newTotal/$totalSeqs) * 100;
		$line=join("\t", $query, @data);
	}
	else{
		print STDERR "[".$0."]".$query." not found!\n";
	}
	print OUT $line."\n";
}
close MAPPED;
