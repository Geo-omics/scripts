#!/usr/bin/env python3
"""
Downsample paired-read fastq files
"""
import argparse
from pathlib import Path
import random

DEFAULT_SEED = '1'
FASTA = 'fasta'
FASTQ = 'fastq'


argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument(
    'inputfiles',
    nargs=2,
    type=argparse.FileType('rb'),
    help='A pair of either FASTA or FASTQ files.',
)
argp.add_argument(
    '--seed',
    type=int,
    help='Seed for pseudo-random number generator.  Default is '
         '' + DEFAULT_SEED + '.',
)
argp.add_argument(
    '-f', '--fraction',
    type=float,
    help='The factor to which the data shall be downsampled.',
)
argp.add_argument(
    '-o', '--out-dir',
    default='.',
    help='Output directory.  The default is the current directory.',
)
argp.add_argument(
    '-v', '--verbose',
    action='count',
    dest='verbosity',
    default=1,
    help='Increase verbosity',
)
argp.add_argument(
    '--force',
    action='store_true',
    help='Allow overwriting existing data',
)
args = argp.parse_args()

if not 0.0 <= args.fraction <= 1.0:
    argp.error('The sampling fraction must be between 0 and 1')

out_dir = Path(args.out_dir)
if not out_dir.is_dir():
    argp.error('Output directory does not exist: {}'.format(out_dir))

# derive output file names
stems = [Path(i.name).stem for i in args.inputfiles]
suffixes = [Path(i.name).suffix for i in args.inputfiles]
outfiles = [
    out_dir / '{}.{}{}'.format(stem, args.fraction, suffix)
    for stem, suffix
    in zip(stems, suffixes)
]
existing_output = [str(i) for i in outfiles if i.exists()]
if not args.force and existing_output:
    argp.error('Output file exists already: {}'
               ''.format(', '.join(existing_output)))

first_bytes = [i.read(1) for i in args.inputfiles]
if first_bytes == 2 * [b'@']:
    file_fmt = FASTQ
elif first_bytes == 2 * [b'>']:
    file_fmt = FASTA
else:
    argp.error('Failed to detect file format of input files.  First character '
               'in files is neither @ not > or they don\'t match.')

for i in args.inputfiles:
    i.seek(0)

if args.verbosity >= 2:
    print('File format detected:', file_fmt)

if file_fmt is FASTA:
    lines_per_seq = 2
elif file_fmt is FASTQ:
    lines_per_seq = 4

sample_count = 0
total_seqs = 0

with outfiles[0].open('wb') as outf1, outfiles[1].open('wb') as outf2:
    random.seed(args.seed, version=2)
    state = 0  # header
    for line_f1, line_f2 in zip(*args.inputfiles):
        if state == 0:
            # line is header
            total_seqs += 1
            select = random.random() <= args.fraction
            if select:
                sample_count += 1

        if select:
            outf1.write(line_f1)
            outf2.write(line_f2)

        state = (state + 1) % lines_per_seq

if args.verbosity >= 2:
    print('Total paired sequences  :', total_seqs)
    print('Paired sequences sampled:', sample_count)
    print('Saved to:', *outfiles)
