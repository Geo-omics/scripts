#!/usr/bin/env python3
"""
Downsample fasta/q files

This implementation will throw a dice for each sequence to decided whether to
include it.  This means that the total number of sampled sequences may differ
from what is expected based on the requested sampling fraction.  This
difference may be significant for small input.

Supported input file formats are FASTA / FASTQ either interleaved or separate
files per read direction.  Input files must have the reads consistently
ordered.  Sequence and quality scores must be on a single line per read.
"""
import argparse
from contextlib import ExitStack
from pathlib import Path
import random

DEFAULT_SEED = '1'
FASTA = 'fasta'
FASTQ = 'fastq'

INTERLEAVED = 'interleaved'
PAIRED = 'paired'
MODE = {1: INTERLEAVED, 2: PAIRED}

argp = argparse.ArgumentParser(description=__doc__)
argp.add_argument(
    'inputfiles',
    nargs='+',
    type=argparse.FileType('rb'),
    help='Input files in either FASTA or FASTQ files.  This must be either a '
         'single interleaved file or, if two files, the forwards reads file '
         'followed by the reverse reads file.',
)
argp.add_argument(
    '--seed',
    type=int,
    default=DEFAULT_SEED,
    help='Seed for pseudo-random number generator.  Default is '
         '' + DEFAULT_SEED + '.',
)
argp.add_argument(
    '-f', '--fraction',
    type=float,
    help='The factor to which the data shall be downsampled.',
)
argp.add_argument(
    '-o', '--out-dir',
    default='.',
    help='Output directory.  The default is the current directory.',
)
argp.add_argument(
    '-v', '--verbose',
    action='count',
    dest='verbosity',
    default=1,
    help='Increase verbosity',
)
argp.add_argument(
    '--force',
    action='store_true',
    help='Allow overwriting existing data',
)
args = argp.parse_args()

try:
    mode = MODE[len(args.inputfiles)]
except KeyError:
    argp.error('1 or 2 input files must be provided, not {}'
               ''.format(len(args.inputfiles)))

if not 0.0 <= args.fraction <= 1.0:
    argp.error('The sampling fraction must be between 0 and 1')

out_dir = Path(args.out_dir)
if not out_dir.is_dir():
    argp.error('Output directory does not exist: {}'.format(out_dir))

# derive output file names
stems = [Path(i.name).stem for i in args.inputfiles]
suffixes = [Path(i.name).suffix for i in args.inputfiles]
outfiles = [
    out_dir / '{}.{}{}'.format(stem, args.fraction, suffix)
    for stem, suffix
    in zip(stems, suffixes)
]
existing_output = [str(i) for i in outfiles if i.exists()]
if not args.force and existing_output:
    argp.error('Output file exists already: {}'
               ''.format(', '.join(existing_output)))

first_bytes = [i.read(1) for i in args.inputfiles]
in_file_count = len(args.inputfiles)
if first_bytes == in_file_count * [b'@']:
    file_fmt = FASTQ
elif first_bytes == in_file_count * [b'>']:
    file_fmt = FASTA
else:
    argp.error('Failed to detect file format of input files.  First character '
               'in files is neither @ not > or they don\'t match.')

for i in args.inputfiles:
    i.seek(0)

if args.verbosity >= 2:
    print('File format detected:', file_fmt)

if file_fmt is FASTA:
    lines_per_seq = 2
elif file_fmt is FASTQ:
    lines_per_seq = 4
else:
    raise RuntimeError('Bad state: file_fmt is {}'.format(file_fmt))

if mode == INTERLEAVED:
    # add line count for reverse read
    lines_per_seq = 2 * lines_per_seq

sample_count = 0
total_seqs = 0
state = 0

with ExitStack() as stack:
    ofiles = [stack.enter_context(i.open('wb')) for i in outfiles]
    random.seed(args.seed, version=2)
    for lines in zip(*args.inputfiles):
        if state == 0:
            # header (INTERLEAVED: header of forward read)
            total_seqs += 1
            select = random.random() <= args.fraction
            if select:
                sample_count += 1

        if select:
            for outf, line in zip(ofiles, lines):
                outf.write(line)

        state = (state + 1) % lines_per_seq

if state != 0:
    print('WARNING: Line count check failed: The processed number of input '
          'file lines is not consistent with expectations for the file '
          'format.  Line count modulo the expected {} lines per sequence '
          '(pair) is {} (should be 0)'.format(lines_per_seq, state))

if args.verbosity >= 2:
    print('Total paired sequences  :', total_seqs)
    print('Paired sequences sampled:', sample_count)
    print('Saved to:', *outfiles)
