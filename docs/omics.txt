======================
The ``omics`` module
======================

This document describe the ``omics`` module.

Getting started
===============

To activate the module on ``flux`` run::
    
    module load geomicro/omics

On the ``vondamm`` or ``cayman`` servers run::

    module load omics

Below, all available tools are listed by category.  Some tools are listed more
than once if they belong to several categories.

Main Pipeline Tool
==================

These are the tools that comprise the Geomicro Illumina Reads Pipeline.

* :program:`prep`: Prepare raw fastq data for further processing
* :program:`qc`: quality check
* :program:`assemble`: Assembles the meta-genome
* :program:`mapping`: Maps reads against an assembly
* :program:`binning`: Bins contigs of assembly

Assembly Tools
==============

* :program:`addFileName2header`: Add the name of the fasta/fastq file
  (without the extension) to the header.  Useful when merging multiple
  fasta/fastq files and wish to easily keep track of sequences

* :program:`batchBlast`: Run multiple Blasts at once in an “embarassingly”
  parallel manner

* :program:`calcN50`: Calculate N50 and L50 values for a fasta file

* :program:`chopper`: Chop a file
  (fasta/fastq/tab-delimited/multiple-line) into multiple parts.

* :program:`createFastq`: Use the fasta and quality files to produce fastq files

* :program:`CRISPR_spacer_extractor`: Given a fasta file with repeat
  sequences and a contig fasta file, get the positions of these repeats in
  the contigs and find the coordinates of spacers

* :program:`dereplicate`: Remove sequences that are exactly the same and
  maintain a record of the clusters.

* :program:`extractSeqs`: Given a list of sequence names, extract the
  sequences from a fasta/fastq file

* :program:`findStretchesOfNs`:  Go through the fasta file and find the
  sequences with a 100 or more N’s at a stretch.

* :program:`gcSkew`: Calculate the GC skew for for a fasta file

* :program:`getRandomData`:  Extract a random % of data (fasta/fastq)

* :program:`interleave`: Take the forward(1) and reverse(2) fasta/fastq
  files and arrange them such that all odd sequences are forward and evens
  are reverse.

* :program:`kmerFreq`: Calculate any kmer frequency from the given fasta

* :program:`length+QC`: Calculate the length and GC content from the fasta file.

* :program:`limit2Length`: Remove sequences from a fasta file that do not
  pass the length threshold set by the user. Print length distribution to
  the screen

* :program:`separateInterleaved`: Separate interleaved files.

* :program:`usageStats`: Monitor a given process and email report when
  process finishes


bam Tools
=========

* :program:`bamTools`: Calculate average coverage for a given list of
  contig names.  Samtools required.

* :program:`coveragePerScaffold`: Using the GenomeCoverageBed default
  output to calculate the coverage per scaffold and the whole genome.

* :program:`derep_getReadAbundance`

* :program:`getBwaMappedReadList`


other bash scripts
==================

* :program:`do2folder`: Do something to the entire folder. Just add the
  command into the script.

* :program:`do2list`: Do something to the a list of file/folder locations.
  Just add the command into the script.

* :program:`ssh2sameFolder`: As the name suggests, SSH to your current
  location in a different server. The path should exist on the other
  server.

* :program:`firefox_already_running`: Helps fight that pesky ‘firefox
  already running’ error. You know which one.


BLAST Tools
===========

* :program:`basicHF`
* :program:`batchBlast`: Run multiple Blasts at once in an “embarassingly”
  parallel manner
* :program:`blastDensityPlot`: Given multiple blasts to the same reference
  database, make density plot based on tabular blast outputs.
* :program:`extract_Blast_Hits_Of_Interest`:
* :program:`extractSubSeq`:
* :program:`fragRec`:
* :program:`getSciNames`:
* :program:`mapper`:
* :program:`parseBlastXML`:
* :program:`plotCoverage`:
* :program:`postBlast`:
* :program:`removeBlastSubj`:
* :program:`removeCommentLines`:
* :program:`silvaTaxonAppend`:
* :program:`top5`: Helper script for :program:`assemble`


De-replication Tools
====================

* :program:`derep_ClusterMap`:
* :program:`derep_getReadAbundance`:
* :program:`dereplicate`:
* :program:`inflate`: Use this script if you’ve used dereplicate.pl to
  remove duplicate reads and wish to know what the original number of
  reads would have been had you used the original dataset.


General Tools
=============

* :program:`folderLevelSize`:
* :program:`usageStats`:
* :program:`firefox_already_running`: Helps fight that pesky ‘firefox
  already running’ error. You know which one.


Homology Tools
==============

* :program:`basicHF`:
* :program:`uClustHomology`:


JGI Tools
=========

* :program:`binTablesForIMG`: Given a list of Contigs reformat it to
  upload to IMG Scaffold workspace

* :program:`consolidateJGIdata`: Consolidate all the data generated by IMG
  annotaions into one(or many, by bins) tab-delimited file.

* :program:`extractGenomes`: extract genomes from NCBI databases (nr/nt)
  using NCBI Taxon ID, curate and concatenate them to form your own
  customized database.

* :program:`img_Bin_Classifier`: Use the IMG taxonomic classification of
  contigs/scaffolds to get the taxo- nomic makeup of each bin.

* :program:`getGFF`: Given a list of contig names extract GFF data.

* :program:`gff2tbl`: Read JGI’s GFF3, Contigs and Gene_product files and
  produce a usable output in NCBI’s ridiculous ‘.tbl’ format.

* :program:`measureCompleteness`: Given a fasta file and IMG consolidated
  data look for the 36 essential bacterial housekeeping genes (Cicarelli
  et al 2006)

* :program:`map_project_names`: Map IMG project names to your own. Creates
  Symbolic links with your project names to extracted IMG tar balls.

* :program:`separateInterleaved`: Separate interleaved files.


Mapper Tools
=============

* :program:`getQueryList`:
* :program:`getSciNames`:
* :program:`itemize`: If you used mapper.pl for multiple datasets and you
  wish to get a comparison for each dataset. Use this script.
* :program:`mapper_getQueryList`:
* :program:`mapper`:
* :program:`silvaTaxonAppend`:


Other Tools
===========

* :program:`extractContigReads`:


NCBI Tools
==========

* :program:`Ebot.Output.Extract.Gi.Title.Rev3`: This script takes a NCBI
  genbank file, extracts the gi#, the study name, the journal it came from
  and the sequence and builds a tab delimitted output for each genbank entry.

* :program:`extractGenomes`: extract genomes from NCBI databases (nr/nt)
  using NCBI Taxon ID, curate and concatenate them to form your own
  customized database.

* :program:`extractGenbankMetadata`: Extract Meta data and protein
  translations from a Genbank format file.

* :program:`gbk2fna`: Read Genbank file and convert it to a Nucleotide Fasta file.

* :program:`getFastaFromAccNos`:

* :program:`getGFF`: Given a list of contig names extract GFF data.

* :program:`getGIAnnotation`:

* :program:`getGiInfo`:

* :program:`getGI`:

* :program:`getLineage`:

* :program:`getSciNames`:

* :program:`gff2tbl`: Read GFF3(tested with JGI’s gff), Contigs and
  Gene_product files and produce a usable output in NCBI’s ridiculous
  ‘.tbl’ format.

* :program:`GI_info_XMLParser`:


Omics DB Tools
==============

* :program:`gff2neo`: Read a GFF(version 3) file and create nodes and
  relationship files for upload to a GraphDB.  Tested on Neo4j v2.2.3.

* :program:`createNodes`: Read the output from the parsers and create
  nodes in the Neo4j database (Not a real script; Place holder)


Ribopicker Tools
================

* :program:`silvaTaxonAppend`:
* :program:`taxonDist`:


Seq Tools
=========

* :program:`addFileName2header`: Add the name of the fasta/fastq file
  (without the extension) to the header.  Useful when merging multiple
  fasta/fastq files and wish to easily keep track of sequences

* :program:`batchBlast`: Run multiple Blasts at once in an “embarassingly”
  parallel manner

* :program:`calcN50`: Calculate N50 and L50 values for a fasta file

* :program:`chopper`: Chop a file
  (fasta/fastq/tab-delimited/multiple-line) into multiple parts.

* :program:`createFastq`: Use the fasta and quality files to produce fastq files

* :program:`CRISPR_spacer_extractor`: Given a fasta file with repeat
  sequences and a contig fasta file, get the positions of these repeats in
  the contigs and find the coordinates of spacers

* :program:`curateDB`:
* :program:`dereplicate`:
* :program:`extractSeqs`:
* :program:`extractSubSeq`:
* :program:`findStretchesOfNs`:
* :program:`gcSkew`:
* :program:`genomeCheck`:
* :program:`getRandomData`:
* :program:`iClust`:
* :program:`interleave`:
* :program:`kmerFreq`:
* :program:`length+GC`:
* :program:`limit2Length`:
* :program:`mapper`:
* :program:`parseFastq`:
* :program:`renameHeaders`:
* :program:`sangerSeqParser`:
* :program:`separateInterleaved`: Separate interleaved files.
* :program:`tetramer_freqs_esom`:
* :program:`toPhylipAndBack`:
* :program:`tinySeq2table.xslt`: - restructure TinySeq format XML file to
  a tab-delimited file
* :program:`tinySeq2fasta.xslt`: - restructure TinySeq format XML file to
  a FASTA format file
* :program:`triage`:
* :program:`U2T`:


Tab Tools
=========

* :program:`countInstances`:
* :program:`fileChopper`:
* :program:`getCol`:
* :program:`getSciNames`:
* :program:`getMasterList`:
* :program:`tally`:
* :program:`tallyWrap`:
* :program:`weave`:


Velvet Tools
============

* :program:`contigMetadata`:
* :program:`extractContigReads`:
* :program:`getMyContigs`:


.. only:: man

    See also
    ========

    :manpage:`illumina-reads-processing(7)`, :manpage:`prep(1)`,
    :manpage:`qc(1)`, :manpage:`assemble(1)`, :manpage:`mapping(1)`

